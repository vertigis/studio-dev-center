"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[1258],{2444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>h});var s=n(5284),a=n(4848),o=n(8453);const i={title:"VertiGIS Studio Web 5.37 Observable Overhaul",author:"Brenda Parker",authorTitle:"Software Developer",authorURL:"https://github.com/bparker-dev",authorImageURL:"https://github.com/bparker-dev.png",tags:["web","sdk"]},r=void 0,c={authorsImageUrls:[void 0]},h=[{value:"ArcGIS Maps SDK for JavaScript <code>.watch</code> Deprecation",id:"arcgis-maps-sdk-for-javascript-watch-deprecation",level:2},{value:"How the Removal of One Method Snowballed into an Overhaul",id:"how-the-removal-of-one-method-snowballed-into-an-overhaul",level:2},{value:"<code>reactiveUtils</code> Inside VertiGIS Studio Web",id:"reactiveutils-inside-vertigis-studio-web",level:3},{value:"The Downsides of Using JS Proxy with Classes in Web",id:"the-downsides-of-using-js-proxy-with-classes-in-web",level:3},{value:"The Pros and Cons of <code>reactiveUtils</code>",id:"the-pros-and-cons-of-reactiveutils",level:3},{value:"So, Back to the Removal of <code>.watch</code>",id:"so-back-to-the-removal-of-watch",level:3},{value:"Shaping the New Watch System",id:"shaping-the-new-watch-system",level:2},{value:"The Wish List",id:"the-wish-list",level:3},{value:"<code>reactiveUtils</code> Support \u2013 Or Lack Thereof",id:"reactiveutils-support--or-lack-thereof",level:3},{value:"Typing the New Watch Function",id:"typing-the-new-watch-function",level:3},{value:"No Base Class? Let\u2019s try Decorators \u2026 (spoiler, we didn\u2019t use decorators)",id:"no-base-class-lets-try-decorators--spoiler-we-didnt-use-decorators",level:3},{value:"Enter the Mixin Pattern",id:"enter-the-mixin-pattern",level:3},{value:"How do you Watch a Property for Changes Without a JS Proxy?",id:"how-do-you-watch-a-property-for-changes-without-a-js-proxy",level:3},{value:"Backwards Compatibility and the Consequences",id:"backwards-compatibility-and-the-consequences",level:3},{value:"If You\u2019ve Been Keeping Score",id:"if-youve-been-keeping-score",level:3},{value:"The New Watch System",id:"the-new-watch-system",level:2},{value:"New Module: observableUtils",id:"new-module-observableutils",level:3},{value:"Observable Mixin",id:"observable-mixin",level:4},{value:"<code>watch</code>",id:"watch",level:4},{value:"<code>notifyChange</code>",id:"notifychange",level:4},{value:"<code>onWatch</code>",id:"onwatch",level:4},{value:"<code>watchEach</code>",id:"watcheach",level:4},{value:"<code>watchEvent</code>",id:"watchevent",level:4},{value:"<code>once</code>",id:"once",level:4},{value:"<code>when</code>",id:"when",level:4},{value:"<code>whenOnce</code>",id:"whenonce",level:4},{value:"<code>createIHandle</code>",id:"createihandle",level:4},{value:"What did we Deprecate?",id:"what-did-we-deprecate",level:3},{value:"<code>reactiveUtils</code> Support",id:"reactiveutils-support",level:4},{value:"Certain <code>useWatch</code> and <code>useWatch</code> Variant Overloads",id:"certain-usewatch-and-usewatch-variant-overloads",level:4},{value:"Common Anti-Patterns to Avoid",id:"common-anti-patterns-to-avoid",level:3},{value:"Watching a Property on <code>this</code>",id:"watching-a-property-on-this",level:4},{value:"<code>watch</code> Callback Invokes <code>notifyChange</code>",id:"watch-callback-invokes-notifychange",level:4},{value:"Calling <code>notifyChange</code> in a Setter for the Property Being Set",id:"calling-notifychange-in-a-setter-for-the-property-being-set",level:4},{value:"Using <code>onCollectionPropertyChange</code> But Ignoring the Passed Event Object",id:"using-oncollectionpropertychange-but-ignoring-the-passed-event-object",level:4}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The recent deprecation of the ",(0,a.jsx)(t.code,{children:".watch"})," method in the ArcGIS Maps SDK for JavaScript caused a cascade effect on key underlying property observability behavior in VertiGIS Studio Web.\nThis blog post is the fully story of how this one change caused us to rethink property observability and what changes can be expected with VertiGIS Studio Web 5.37."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["If you want to know what the end result is and what the new functionality and interfaces look like, jump to the last section ",(0,a.jsx)(t.a,{href:"/blog/2025/08/05/web-observable-overhaul#the-new-watch-system",children:"The New Watch System"}),". If you\u2019re curious about why we did this and how we got to the end result, read on."]})}),"\n",(0,a.jsxs)(t.h2,{id:"arcgis-maps-sdk-for-javascript-watch-deprecation",children:["ArcGIS Maps SDK for JavaScript ",(0,a.jsx)(t.code,{children:".watch"})," Deprecation"]}),"\n",(0,a.jsxs)(t.p,{children:["Prior to the ArcGIS Maps SDK for JavaScript (ArcGIS JS SDK) version 4.32 release, almost every class in the ArcGIS JS SDK had a ",(0,a.jsx)(t.code,{children:".watch"})," method. This method was inherited from the base class ",(0,a.jsx)(t.code,{children:"Accessor"})," that most classes in the ArcGIS JS SDK ultimately inherit from. With the release of 4.32, the ",(0,a.jsx)(t.code,{children:".watch"})," method on ",(0,a.jsx)(t.code,{children:"Accessor"})," was deprecated in favour of using their ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," utility functions instead as these were the utilities that replaced the ",(0,a.jsx)(t.code,{children:"watchUtils"})," the ArcGIS JS SDK had at initial release."]}),"\n",(0,a.jsx)(t.p,{children:"When VertiGIS Studio Web (Web) was first developed, we followed the watch pattern that had been established by the ArcGIS JS SDK. Doing this allowed for a more seamless experience when developing Web SDK applications; you could follow the same pattern and the watch utilities were compatible."}),"\n",(0,a.jsxs)(t.p,{children:["When ",(0,a.jsx)(t.code,{children:"watchUtils"})," was deprecated and ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," support was added, we had to make a decision of how we would support this change going forward. Because only ",(0,a.jsx)(t.code,{children:"watchUtils"})," support was being removed, and the ",(0,a.jsx)(t.code,{children:".watch"})," method on ",(0,a.jsx)(t.code,{children:"Accessor"})," was remaining, it was decided to leave the ",(0,a.jsx)(t.code,{children:".watch"})," method on our classes as well but also add support for using our classes with ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),". By doing this we were able to support ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," without any breaking changes to our APIs. You can read about the ",(0,a.jsx)(t.code,{children:"watchUtils"})," to ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," change in the ArcGIS JS SDK here: ",(0,a.jsx)(t.a,{href:"https://www.esri.com/arcgis-blog/products/js-api-arcgis/developers/reactiveUtils-and-why-you-should-be-using-them-instead-of-watchutils-with-the-arcgis-maps-sdk-for-javascript",children:"Why you should be using reactiveUtils instead of watchUtils"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Now, with the deprecation of the ",(0,a.jsx)(t.code,{children:".watch"})," method on ",(0,a.jsx)(t.code,{children:"Accessor"}),", the last vestige of the ",(0,a.jsx)(t.code,{children:"watchUtils"})," is finally being removed from the ArcGIS JS SDK. But as much of our code still uses the ",(0,a.jsx)(t.code,{children:".watch"})," method pattern, we finally had to confront a breaking change."]}),"\n",(0,a.jsx)(t.h2,{id:"how-the-removal-of-one-method-snowballed-into-an-overhaul",children:"How the Removal of One Method Snowballed into an Overhaul"}),"\n",(0,a.jsxs)(t.p,{children:["Why not just remove the one deprecated pattern and leave the ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," support? Good question. That was definitely an option. But the support for ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," and how it was implemented had some major side effects that we\u2019ve been trying to deal with ever since."]}),"\n",(0,a.jsxs)(t.h3,{id:"reactiveutils-inside-vertigis-studio-web",children:[(0,a.jsx)(t.code,{children:"reactiveUtils"})," Inside VertiGIS Studio Web"]}),"\n",(0,a.jsxs)(t.p,{children:["To understand why the deprecation of ",(0,a.jsx)(t.code,{children:".watch"})," cascaded into an overhaul of our property watch system, you have to understand how we\u2019re currently supporting the use of our classes with the ArcGIS JS SDK\u2019s ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," and how ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," work."]}),"\n",(0,a.jsxs)(t.p,{children:["All of the ArcGIS JS SDK\u2019s classes (or at least most) are compatible with ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),"; you can use them with ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," without thinking about it and it will just work. However, if you try to use your own class with ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," it isn\u2019t going to do anything."]}),"\n",(0,a.jsxs)(t.p,{children:['For properties to be "watchable" with ',(0,a.jsx)(t.code,{children:"reactiveUtils"}),', your property needs to be able to "announce" itself to the ArcGIS JS SDK ',(0,a.jsx)(t.code,{children:"reactiveUtils"})," system whenever it is accessed, not just when it changes. To do this you would normally need to add a decorator the ArcGIS JS SDK provides to your property (See ",(0,a.jsx)(t.a,{href:"https://developers.arcgis.com/javascript/latest/api-reference/esri-core-accessorSupport-decorators.html#property",children:"Property"}),'). This decorator adds the necessary code to the property to make the property "watchable".\nHaving to add this decorator to every property in Web would have been a daunting task, but that wasn\u2019t the only problem we faced.']}),"\n",(0,a.jsxs)(t.p,{children:["At the time, to use those decorators you needed to set your ",(0,a.jsx)(t.code,{children:"tsconfig"})," with ",(0,a.jsx)(t.code,{children:"useDefineForClassFields"})," to ",(0,a.jsx)(t.code,{children:"false"}),". Setting this to ",(0,a.jsx)(t.code,{children:"false"})," is only meant for pre-TC39 projects as part of migration and this compiler option now defaults to true since ES2022 when not specified. We did not like the idea of using an old compiler option to use ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," with our classes."]}),"\n",(0,a.jsxs)(t.p,{children:["So if we didn't want to find every single property in our classes to decorate and we didn't want to use the old compiler option, we needed another solution. Enter, the ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",children:"JS Proxy"}),"... and some dicey JS."]}),"\n",(0,a.jsxs)(t.p,{children:['If we could wrap our classes in a JS Proxy we would be able to use its traps for \u2018get\u2019 and \u2018set\u2019 which would give us the ability to "announce" access and changes of a property to the underlying system supporting ',(0,a.jsx)(t.code,{children:"reactiveUtils"}),". We already had a core base class called ",(0,a.jsx)(t.code,{children:"Observable"})," that was handling the old ",(0,a.jsx)(t.code,{children:"watchUtils"})," style watches and all classes in Web ultimately inherited from this base class, so the proxy was added to the constructor of this class."]}),"\n",(0,a.jsxs)(t.p,{children:["Now, the classes and interfaces necessary to be able to tell ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," about properties are not exposed publicly from the ArcGIS JS SDK, but being JS everything is technically accessible. We did some reverse engineering to discover how to tell ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," when a property was accessed or changed and implemented that in the proxy traps. This effectively allowed every property on all of our classes to participate in the ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," watch system."]}),"\n",(0,a.jsx)(t.h3,{id:"the-downsides-of-using-js-proxy-with-classes-in-web",children:"The Downsides of Using JS Proxy with Classes in Web"}),"\n",(0,a.jsx)(t.p,{children:"For the most part, the JS Proxy implementation has been very effective. So effective, in fact, that it seems to be doing magic, and that magic has created some very hard to find bugs over the years."}),"\n",(0,a.jsxs)(t.p,{children:["Because the JS Proxy traps all properties on the object, this means that all data properties, accessor properties, and ",(0,a.jsx)(t.strong,{children:"methods"})," must run through the \u2018get\u2019 and \u2018set\u2019 traps. Additionally, every time an accessor property was accessed (getter), every single underlying property and method that was on one of our classes that was invoked in the property getter would announce itself to the ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," watch system. This cascade of property tracking made it easy to create a new property without needing to worry about the watch system and what it needs to know about to watch that property for changes. However, this amount of magic is costly, and performance takes a significant hit for this convenience. Memory usage also suffers with the amount of extra things being tracked that don\u2019t necessarily need to be. On top of this, because this was implemented in the base class that everything in Web inherits from, it made everything in Web watchable, even when it didn\u2019t need to be, creating even more overhead."]}),"\n",(0,a.jsxs)(t.p,{children:['There are other development level inconveniences. The amount of "magic" happening for watches meant that when the "magic" didn\u2019t work, developers would spend an inordinate amount of time trying to figure out why, instead of understanding the limitations of the watch system and when they needed to perform some extra calls to ensure that watches would work properly. It would even result in some interesting workarounds to what should have been a simple fix. Using the proxy also made it so that JS\u2019s private property ',(0,a.jsx)(t.code,{children:"#prop"})," couldn\u2019t be used as these properties are not available on JS Proxies, limiting use of a built-in modern JS feature in our codebase. The main inconvenience though, is during debugging. JS Proxies add an extra layer to objects to sift through when trying to debug your code, and if every single class is a proxy, that\u2019s a lot of extra layers to go through to get to the information you\u2019re looking for, subsequently burning development time."]}),"\n",(0,a.jsxs)(t.p,{children:["With these issues in mind, particularly the performance hit, we\u2019ve been wanting to remove the use of the JS Proxy from our classes for some time, but we\u2019ve never had a good path forward that would allow us to continue providing property change watch support with ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),"."]}),"\n",(0,a.jsxs)(t.h3,{id:"the-pros-and-cons-of-reactiveutils",children:["The Pros and Cons of ",(0,a.jsx)(t.code,{children:"reactiveUtils"})]}),"\n",(0,a.jsxs)(t.p,{children:["Over the years we have seen many uses of ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),", both in our codebase and across various Web SDK applications built internally and externally, and we have learned a lot about how to use it well, where it shines, and where we wish we had something slightly different."]}),"\n",(0,a.jsxs)(t.p,{children:["Let\u2019s talk about the pros. The interface is simple and somewhat familiar to JS developers. Callbacks are commonplace in JS and by utilizing them for the watch value callback the ",(0,a.jsx)(t.code,{children:"watch"})," function from ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," is easy to use. Autocomplete and renaming properties/methods work well in IDEs and there\u2019s flexibility, allowing you to do more than just return a property value: you can return calculations from multiple properties and all of that would be tracked and trigger the callback when those properties change. If using TypeScript, as we recommend and use in our codebase, the return value from the watch value callback is typed properly when passed to the callback, making development that much easier and less error prone."]}),"\n",(0,a.jsx)(t.p,{children:"But there are some downsides we\u2019ve found, and some are harder to spot than others.\nThe first issue that caught us quite a few times is that the property you are watching, the entire object chain, may not actually be watchable and there\u2019s nothing in the IDE, types from TypeScript, or even at runtime that will tell you that the watch you setup isn\u2019t going to do anything."}),"\n",(0,a.jsx)(t.p,{children:"The callback in this code will never execute:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const myObj = { testProp = "test1" };\nwatch(\n    () => myObj.testProp,\n    // This callback will never fire because the\n    // object being watched isn\'t watchable.\n    (value) => console.log(value)\n);\nmyObj.testProp = "test2";\n'})}),"\n",(0,a.jsx)(t.p,{children:"While this is a contrived example, it is easy to see where someone can accidentally fall into this trap when you\u2019re working with many nested properties on a mix of objects from different sources. There have been a number of times where a watch would be added that looks like it is needed and everything seems to be working as intended but the watch itself never actually does anything because it is watching something that is unwatchable and the intended behavior is actually occurring due to another piece of code. While having a watch that does nothing may not seem so bad on the surface, it does clutter up code and change people\u2019s expectations of how something is supposed to be working. There is also another drawback we discovered."}),"\n",(0,a.jsxs)(t.p,{children:["Creating a new watch does impact performance. When you spend a minute to think about it, of course it does! You\u2019re executing a function that is going to do something, it must do work which takes some amount of time. But it isn\u2019t always something that is considered; executing code to setup something that will ultimately never perform the action it is supposed to is, of course, going to impact performance. With watch from ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," not being able to tell us if the thing we\u2019re watching is actually watchable, we could be adding a small performance hit to something and if that small performance hit happens 100,000 times, well... you get the idea."]}),"\n",(0,a.jsxs)(t.p,{children:["Another thing we've noticed was a recurring misuse of ",(0,a.jsx)(t.code,{children:"watch"})," from ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),". ",(0,a.jsx)(t.code,{children:"watch"})," will return a handle that is supposed to be called to cleanup the watch when it is no longer needed. While this pattern of cleaning up a handler (or listener) is extremely prevalent in development, we\u2019ve found that this is easily missed with ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," use, and have been known to miss it ourselves from time to time, causing memory leaks."]}),"\n",(0,a.jsxs)(t.p,{children:["There is one more consideration that is easily missed when constructing watches using ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),", and to understand this, you need to know how JavaScript closures and lexical scoping work."]}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s take the following code as an example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"function myLeakyFunc(\n    someLargeObject: object,\n    someObservableObject: object\n) {\n    // The lexical scope created at this level\n    // includes both `someLargeObject` and `someObservableObject`.\n\n    // This lexical scope is captured by all 3 anonymous\n    // functions' closures and will live for as long as the\n    // anonymous functions are referenced.\n\n    const myFunc = () => {\n        console.log(someLargeObject);\n    };\n\n    const handle = watch(\n        () => someObservableObject.prop,\n        (newPropValue) => console.log(newPropValue)\n    );\n\n    return [myFunc, handle];\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"On the surface this seems innocent enough. We have a large object that needs to be used in an anonymous function and a watch that needs to watch a property on a completely separate observable object, and the anonymous function is returned for use by the caller as well as the watch handle for cleanup when no longer needed. But sadly this has the potential to create a whole host of memory leaks depending on the browser engine and garbage collector being used."}),"\n",(0,a.jsxs)(t.p,{children:["When JavaScript creates closures for functions, those closures are created using the lexical environment for where that function is created. When functions exist at the same lexical environment level, they share the same lexical scope. In this case, both ",(0,a.jsx)(t.code,{children:"myFunc"}),", the watch value callback, and the watch callback all share the same lexical scope. This means that any objects that are needed for one of these anonymous functions are included in the closure for the other functions, even though they don\u2019t use the value. This means that, even if the returned ",(0,a.jsx)(t.code,{children:"myFunc"})," goes out of scope by the running program and is cleaned up by the GC, the watch is still holding onto the large object because the large object was included in the lexical scope that the watch callbacks\u2019 closures captured. This also happens the other way around, where ",(0,a.jsx)(t.code,{children:"myFunc"})," will hold the observable object alive even when we cleanup the watch by calling ",(0,a.jsx)(t.code,{children:"remove"})," on the returned handle when we were done with it."]}),"\n",(0,a.jsx)(t.p,{children:"While this last example is a basic one, it is easy to imagine how quickly these closure leaks can become a problem in modern JavaScript development."}),"\n",(0,a.jsxs)(t.h3,{id:"so-back-to-the-removal-of-watch",children:["So, Back to the Removal of ",(0,a.jsx)(t.code,{children:".watch"})]}),"\n",(0,a.jsxs)(t.p,{children:["With the removal of ",(0,a.jsx)(t.code,{children:".watch"})," from the ArcGIS JS SDK classes it makes sense for us to remove our implementation of ",(0,a.jsx)(t.code,{children:".watch"})," as well, given that our ",(0,a.jsx)(t.code,{children:".watch"})," is tied into the ArcGIS JS SDK implementation. This would be a breaking change in the Web SDK which we do try to approach with much caution. While the removal of ",(0,a.jsx)(t.code,{children:".watch"})," from the ArcGIS JS SDK is going to be a breaking change for Web SDK developers, and there isn\u2019t anything we can do about that, we always look carefully at any breaking changes we\u2019re going to make to our APIs to ensure that they are truly in the best interests of progressing the ease of future development."]}),"\n",(0,a.jsxs)(t.p,{children:["Removing ",(0,a.jsx)(t.code,{children:".watch"})," would leave us relying on ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," for observable functionality, and as you\u2019ve seen reading through this, perhaps that isn\u2019t the best approach for Web, with the use of the JS Proxy and various performance and memory issues. After much discussion, since we were going to have to make a breaking change to the Web SDK anyway with the removal of ",(0,a.jsx)(t.code,{children:".watch"}),", we decided to look into what it might look like if we revisited property observability with a fresh approach."]}),"\n",(0,a.jsx)(t.h2,{id:"shaping-the-new-watch-system",children:"Shaping the New Watch System"}),"\n",(0,a.jsx)(t.h3,{id:"the-wish-list",children:"The Wish List"}),"\n",(0,a.jsx)(t.p,{children:"We compiled a wish list of everything we would want in a property observability implementation, knowing that we likely would need to compromise in some places."}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Does not use a JS Proxy."}),"\n",(0,a.jsx)(t.li,{children:"A watch system that would remain stable with the same interface if the ArcGIS JS SDK ever changes their watch system again."}),"\n",(0,a.jsx)(t.li,{children:"Will error at compile time with TypeScript if given objects or properties that cannot be watched."}),"\n",(0,a.jsx)(t.li,{children:"Will error or warn at runtime if trying to watch objects or properties that cannot be watched."}),"\n",(0,a.jsx)(t.li,{children:"Will not leak memory, even when misused."}),"\n",(0,a.jsx)(t.li,{children:"Will not do anything functional when nothing is watching a property that is watchable. i.e.: no tracking announcements, no change notifications to nowhere, etc."}),"\n",(0,a.jsx)(t.li,{children:"Will provide auto-completions with TypeScript for properties that are watchable."}),"\n",(0,a.jsx)(t.li,{children:"Will provide correct types with TypeScript for values passed to any callbacks."}),"\n",(0,a.jsx)(t.li,{children:"Remove the need for a root base class that everything must inherit from so that we can be selective about classes that can be observable, not everything needs to be watched."}),"\n",(0,a.jsx)(t.li,{children:"Does not use private/internal code from a third-party library or the ArcGIS JS SDK."}),"\n",(0,a.jsx)(t.li,{children:"Does not require any form of specifying the exact properties that will be observable when creating a new class or updating an existing one."}),"\n",(0,a.jsx)(t.li,{children:"Observability must be opted into by the class implementor."}),"\n",(0,a.jsx)(t.li,{children:"Can accept objects from the ArcGIS JS SDK that are watchable."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"And as a must have: Allows us to provide a smooth transition for Web SDK apps with full backwards compatibility for, at minimum, a couple of full release cycles."}),"\n",(0,a.jsx)(t.p,{children:"This seemed like a pretty daunting wish list. But we had a few ideas, and JavaScript is inherently extremely flexible."}),"\n",(0,a.jsxs)(t.h3,{id:"reactiveutils-support--or-lack-thereof",children:[(0,a.jsx)(t.code,{children:"reactiveUtils"})," Support \u2013 Or Lack Thereof"]}),"\n",(0,a.jsxs)(t.p,{children:["There was one thing that stood out to us with our wish list though; we would not be able to support using our classes with the ArcGIS JS SDK\u2019s ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," with any new system we came up with that lacked a JS Proxy. ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," inherently requires the running of property access tracking code when you have no idea if something is watching a property or not, which conflicts with wish list item #6 (no extra code execution). And even if we could come up with something, we\u2019d still end up breaking wish list item #1 (no JS Proxy) and #10 (no third-party private code use). Wish list item #5 (no memory leaks) would also continue to be an issue, and there would be the threat of wish list item #2 (stable interface) not being met."]}),"\n",(0,a.jsxs)(t.p,{children:["Because of these reasons, we decided to proceed with a proof-of-concept (POC) that would not include support for using our classes with ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," functions. We would work in support after if the POC was viable for backwards compatibility, but if the implementation made it past POC the expectation to be set was that support for ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," would be removed."]}),"\n",(0,a.jsx)(t.h3,{id:"typing-the-new-watch-function",children:"Typing the New Watch Function"}),"\n",(0,a.jsx)(t.p,{children:"A number of our wish list items are related to TypeScript and typing watch functionality so we can surface mistakes at compile time and in an IDE well before code tries to run."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," pattern does get part way there, but as we\u2019ve explored, it won\u2019t tell you if you\u2019re watching something that shouldn\u2019t be watched because there is no way to interrogate the objects being used in the watch value callback. To compound the type issues with the ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," watch pattern, we were also thinking about how to deal with accidental/misuse caused memory leaks. We knew we were going to have to have some form of callback for the watch property value change, but if we could control how the property value is accessed before executing that callback and wrap the main object reference in a ",(0,a.jsx)(t.code,{children:"WeakRef"}),", we\u2019d be able to manage the watch\u2019s object references in a more efficient and less prone to leaks way."]}),"\n",(0,a.jsx)(t.p,{children:"With these things in mind, we decided that our best option was to create a utility function, separate from any classes and require the object to be watched to be passed to it, which will allow us to control how the watch system holds a reference to that watched object."}),"\n",(0,a.jsxs)(t.p,{children:["The original ",(0,a.jsx)(t.code,{children:".watch"})," functions used a string to specify paths to properties, but it was just a string, causing mistypes and refactors to break watches without anything surfacing the issue in a timely manner. Those ",(0,a.jsx)(t.code,{children:".watch"})," functions were written quite awhile ago, when TypeScript wasn\u2019t very good at recursive typing, and template string types didn\u2019t exist."]}),"\n",(0,a.jsxs)(t.p,{children:["So, along with the object to be watched we decided a string property path would be our best option. With modern TypeScript, we can now build out a complex, template string recursive type that can build out the available watch options for nested watch property paths. There is a bit of a performance hit in IDEs when this recursive type encounters large deeply nested objects, so after dialing in the type performance we had to limit the depth of recursion to three for full type checking. But we expect that with the new ",(0,a.jsx)(t.a,{href:"https://devblogs.microsoft.com/typescript/typescript-native-port/",children:"native TypeScript"})," compiler that\u2019s in the works, this performance issue will get much better and we will likely be able to expand the depth of the type checking further."]}),"\n",(0,a.jsx)(t.p,{children:"Aside from the minor IDE performance issue, there is another IDE related drawback to the string property path: you won\u2019t be able to use rename functionality and have that update the string references, nor will a reference lookup find watches for the properties being watched. But we decided these IDE drawbacks can be lived with, given the memory management advantage of this pattern."}),"\n",(0,a.jsxs)(t.p,{children:["After dialing in the types and starting to spread around the new watch, we did encounter one other quirk. When attempting to pass ",(0,a.jsx)(t.code,{children:"this"})," as the object being watched, TypeScript wasn\u2019t happy. Turns out, when you\u2019re using constrained generic types for typing arguments and you pass ",(0,a.jsx)(t.code,{children:"this"})," to one of those arguments TypeScript won\u2019t infer the type of ",(0,a.jsx)(t.code,{children:"this"}),". They have their reasons, but it is a bit inconvenient in our use case. We debated on how to handle this, and tried a number of different ways to workaround it, but in the end we couldn\u2019t find anything better than just casting ",(0,a.jsx)(t.code,{children:"this"})," when passed. But, we also realized that in a lot of cases we see where ",(0,a.jsx)(t.code,{children:"this"})," is being passed as the watch object, a watch really shouldn\u2019t be used. Using the watch system to know when a property changes that you have control of is pretty heavy handed; a better approach would be to do whatever action you want in a setter instead."]}),"\n",(0,a.jsx)(t.h3,{id:"no-base-class-lets-try-decorators--spoiler-we-didnt-use-decorators",children:"No Base Class? Let\u2019s try Decorators \u2026 (spoiler, we didn\u2019t use decorators)"}),"\n",(0,a.jsxs)(t.p,{children:["Wish list #9 would have us remove the ",(0,a.jsx)(t.code,{children:"Observable"})," base class from all of our classes so that we can be more targeted about what is actually observable and what is not. To do this we would need some way to add functionality to a class without inheritance. This sounds like exactly what decorators are designed to do.\nThe first iteration of the new observable implementation was built as a class decorator. This would fulfill wish list item #9 and #11 (no base class and not specifying exact properties that are observable, respectively)."]}),"\n",(0,a.jsx)(t.p,{children:"However, we ran into some immediate problems around TypeScript typing. Mainly, TypeScript doesn\u2019t augment the types of a class (or anything) that uses a decorator that, from the JavaScript perspective, does augment the class with new functionality. This created a typing problem: to satisfy wish list item #12 (opt in observability) we would need an extra interface that implementors would also have to add to their observable classes to ensure that the class is observable. It looked something like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"interface IObservable {\n    __isObservable: true;\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"Now, having to spread that around everywhere whenever you used the decorator was going to be very annoying. So, we decided that perhaps, at this moment in time, decorators were not the answer to our problem."}),"\n",(0,a.jsx)(t.h3,{id:"enter-the-mixin-pattern",children:"Enter the Mixin Pattern"}),"\n",(0,a.jsx)(t.p,{children:"Decorators are really just a another way of using the mixin pattern, so we switched gears and gave that a try instead, and it ended up working out really well. With the mixin pattern we were able to wrap any class with our observable implementation, even base classes that a class is inheriting from. It also allowed us to type the returned class so TypeScript would understand that this class is observable so we could surface the type errors we were hoping to without needing to expose an extra interface."}),"\n",(0,a.jsx)(t.p,{children:"This still requires using the mixin as a base class in most use cases, but because it is a mixin, you can use it to wrap a base class you are already inheriting from, effectively allowing multiple inheritance. While it doesn\u2019t get rid of the base class requirement if the mixin is used this way, it does get rid of the problem that we were trying to solve when we wished for the watch system to not use a base class."}),"\n",(0,a.jsx)(t.p,{children:"As with everything, there is one drawback to this pattern. If you have constructed a class hierarchy that requires a generic type be passed from a child class to a parent class, TypeScript will not be happy with that."}),"\n",(0,a.jsx)(t.p,{children:"After reviewing this issue, it was decided this was an acceptable drawback. In most cases, there are other ways to workaround this using base types or type overrides in the child class and this situation does not occur commonly in our Web SDK patterns."}),"\n",(0,a.jsx)(t.h3,{id:"how-do-you-watch-a-property-for-changes-without-a-js-proxy",children:"How do you Watch a Property for Changes Without a JS Proxy?"}),"\n",(0,a.jsx)(t.p,{children:"A JS Proxy has its uses, and observability is one of them, but we\u2019ve found that in Web it just doesn\u2019t scale well. Then the question became, how do you watch a property for changes while satisfying wish list item #11 and not requiring developers to specify every single property they want to be able to watch?"}),"\n",(0,a.jsx)(t.p,{children:"Looking at this problem at the very basic level, we want to be able to call a function (the watch callback) whenever a property is set to a new value. If doing this for just one class, you\u2019d likely consider adding a call to property setters. This thought is what lead us to our implementation."}),"\n",(0,a.jsx)(t.p,{children:"JavaScript objects allow you to redefine property descriptors so long as the descriptor is configurable. Since all of the objects we work with have configurable descriptors we realized that we could redefine the properties on demand to augment their setter (or if they don\u2019t have one add a setter) to include code to handle calling watch callbacks when the property value changes. A quick POC of this proved its viability. This admittedly may seem a little hacky, but if done thoughtfully and carefully we would be able to create a watch system that only ever does work if something creates a watch instead of having to assume there might be a watch."}),"\n",(0,a.jsxs)(t.p,{children:["Classes from the ArcGIS JS SDK are a bit different. We felt that since it already has a watch system (",(0,a.jsx)(t.code,{children:"reactiveUtils"}),") and all the underlying code of that system would be run anyway, we might as well defer to it when we encounter an ArcGIS JS SDK object that is watchable. By controlling how ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," is used with ArcGIS JS SDK objects under the hood of the new watch system, we can control when a watch needs to be created and manage the accessed objects with ",(0,a.jsx)(t.code,{children:"WeakRef"}),"s for better memory management."]}),"\n",(0,a.jsx)(t.h3,{id:"backwards-compatibility-and-the-consequences",children:"Backwards Compatibility and the Consequences"}),"\n",(0,a.jsx)(t.p,{children:"At this point we had a pretty good looking POC, everything in our codebase was swapped over and all was well with our automated tests and initial basic testing. But there would be no way we could release this as is as it would break almost every single Web SDK built app out there. We had to come up with a plan for a non-breaking transition."}),"\n",(0,a.jsxs)(t.p,{children:["Deprecating the old ",(0,a.jsx)(t.code,{children:".watch"})," functions on our classes instead of removing them outright and swapping the underlying code to the new watch system was fairly straightforward. We just had to change some places where we were throwing exceptions in our new code to log warnings instead and add some extra null checks. We deprecated some other utility functions as well in favour of the new observable system functions."]}),"\n",(0,a.jsxs)(t.p,{children:["The real challenge was going to be ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," support. We ran through a number of different ways to try to add it into the new system without using a JS Proxy, but nothing was going to work 100% of the time. We had to add the proxy back\u2026 This meant that some of our innovations for better memory management and improved performance would not be able to make the first release of the new observable system, but backwards compatibility was non-negotiable."]}),"\n",(0,a.jsx)(t.h3,{id:"if-youve-been-keeping-score",children:"If You\u2019ve Been Keeping Score"}),"\n",(0,a.jsxs)(t.p,{children:["If we look through our wish list items, it looks like we managed to tick everything off the list! Well, almost\u2026 the improved memory management and performance will have to wait until we can remove the support added for backwards compatibility and ",(0,a.jsx)(t.code,{children:"reactiveUtils"}),". We\u2019ll also need to wait for the native TypeScript compiler to dial in the type checking even further. We also didn\u2019t fully get rid of a base class, but we did solve the problem that wish list item was for with the mixin pattern allowing for multiple inheritance. But overall, we managed to accomplish what we set out to do."]}),"\n",(0,a.jsx)(t.h2,{id:"the-new-watch-system",children:"The New Watch System"}),"\n",(0,a.jsx)(t.p,{children:"We\u2019ve completely overhauled how watching objects for property changes works in the VertiGIS Studio Web SDK (Web SDK). This new functionality is going to be more performant and use less memory than the previous versions (once the old code and support for backwards compatibility is removed) and will create a stable interface for us to continuously improve and add to the property watch system."}),"\n",(0,a.jsx)(t.p,{children:"This new system will reduce the number of common errors we see when using the currently available property watch systems. We did have to deprecate a number of things from the old systems that will be removed, so make sure to review the list and update your Web SDK apps soon. While we are giving a transition period of a couple full release cycles, it is better to jump on this change sooner rather than later."}),"\n",(0,a.jsx)(t.h3,{id:"new-module-observableutils",children:"New Module: observableUtils"}),"\n",(0,a.jsxs)(t.p,{children:["We\u2019ve added a new module that contains all of the new observable functionality called ",(0,a.jsx)(t.code,{children:"observableUtils"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["You can import ",(0,a.jsx)(t.code,{children:"observableUtils"})," functions from @vertigis/arcgis-extensions."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { watch } from "@vertigis/arcgis-extensions/support/observableUtils";\n'})}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Function"}),(0,a.jsx)("th",{children:"Description"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"observable"})}),(0,a.jsx)("td",{children:"The mixin used to add observability to a class."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"watch"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Watches a specific property or property path for changes."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"notifyChange"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Tells the watch system that the given property may have\nchanged and needs to be checked."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"onWatch"})}),(0,a.jsx)("td",{children:"Allows you to react to something watching a property."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"watchEach"})}),(0,a.jsx)("td",{children:"Watches a property on each item in a collection."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"watchEvent"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Attaches an event listener to the watched property and\nremoves the old listener whenever the property changes."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"once"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Async watch that allows you to await for a property to\nchange."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"when"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Watches a property or property path for the value to\nbecome truthy."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"whenOnce"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Async when that allows you to await for a property to\nbecome truthy."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"createIHandle"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Helper utility to create a new IHandle from an iterable of\nIHandles."})})]})]}),"\n",(0,a.jsx)(t.h4,{id:"observable-mixin",children:"Observable Mixin"}),"\n",(0,a.jsx)(t.p,{children:"To add observability to a class there are a few different ways to use the new mixin to accomplish this, but we\u2019ve found the cleanest approach, and the one that gets you the best type checking by TypeScript, is to extend the mixin, or wrap a base class being extended with the mixin."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"class MyClassNoBaseClass extends observable() {}\n\nclass MyClassWithBaseClass extends observable(BaseClass) {}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["This will make your class observable so it can be used with the other ",(0,a.jsx)(t.code,{children:"observableUtils"})," functions."]}),"\n",(0,a.jsx)(t.h4,{id:"watch",children:(0,a.jsx)(t.code,{children:"watch"})}),"\n",(0,a.jsxs)(t.p,{children:["This is the main watch function, it is also what backs ",(0,a.jsx)(t.code,{children:"useWatch"})," and most if its variants. This function supports watching any classes from the Web SDK that are observable, any classes from the ArcGIS JS SDK that inherit from Accessor which indicates that they are observable, and any custom classes that you create that use the observable mixin."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watch"})," watches a property for changes. This can be a property on the given object or a property on a nested object if the nested object is also observable. It will call the given callback whenever the property value for the given path changes. The callback, however, will not be invoked if the value is set to the same value or the value ultimately has not changed. This includes if a parent property in a nested property path changes but the resulting value is the same as the previous value."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyObservable extends observable() {\n    private _backingFieldForGetter = "backingFieldForGetter";\n    dataProperty: string = "dataProperty";\n\n    get getter() {\n      return this._backingFieldForGetter;\n    }\n}\n\nconst myObservable = new MyObservable();\nwatch(myObservable, "getter", callback);\nwatch(myObservable, "dataProperty", callback);\n\nclass MyClass extends observable() {\n   private _backingFieldForAccessor = new MyObservable();\n\n   get getterSetter {\n     return this._backingFieldForAccessor;\n   }\n   set getterSetter(value: MyObservable) {\n     this._backingFieldForAccessor = value;\n   }\n}\n\nconst myClass = new MyClass();\nwatch(myClass, "getterSetter", callback);\nwatch(myClass, "getterSetter.getter", callback);\nwatch(myClass, "getterSetter.dataProperty", callback);\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watch"})," returns an IHandle that should be removed once the watch is no longer needed."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'const handle = watch(myClass, "getterSetter", callback);\n// Call remove on the handle when you no longer need the watch.\nhandle.remove();\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"watch"})," function accepts some options to modify its behavior."]}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Option"}),(0,a.jsx)("th",{children:"Description"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"sync"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Whether or not the callback will be called synchronously.\nDefault is false."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"once"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"If true, the callback will only be called once on the very\nfirst property change. Default is false."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"initial"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"If true, the callback will be called with the initial\nvalue of the property. In this case, both the newValue and\noldValue properties will contain the initial value.\nDefault is false."})})]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'watch(myClass, "myProp", callback, {\n    sync: true,\n    initial: true,\n    once: true,\n});\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In regards to the ",(0,a.jsx)(t.code,{children:"sync"})," option, it is recommended to avoid using this when possible and instead allow your callback to be invoked async. Reacting to property changes asynchronously gives more room for the JS event loop to continue with other async work including user interactions, creating a better user experience."]}),"\n",(0,a.jsx)(t.h4,{id:"notifychange",children:(0,a.jsx)(t.code,{children:"notifyChange"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"notifyChange"})," allows you to tell the watch system that a property may have changed. When ",(0,a.jsx)(t.code,{children:"notifyChange"})," is called for a property, the watch system will check if the property value has indeed changed, if it has it will trigger the watches for that property as appropriate, else it will do nothing."]}),"\n",(0,a.jsxs)(t.p,{children:["For the most part, the watch system handles basic property updates itself without needing ",(0,a.jsx)(t.code,{children:"notifyChange"})," to be called manually. There are some cases though where the watch system cannot determine on its own if the value of a property has changed. It is important to be aware of these cases and handle them properly."]}),"\n",(0,a.jsx)(t.p,{children:"The most common case is when an accessor property\u2019s backing property is updated directly instead of using a setter. It is common to see this with getter only properties. In this scenario, the watch system has no way to know that the backing property was updated, and that the accessor\u2019s value has changed."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyClass extends observable() {\n    private _myBackingProperty: number = 0;\n\n    get myProp() {\n        return this._myBackingProperty;\n    }\n\n    doSomething() {\n        this._myBackingProperty++;\n        // We need to announce a change for the prop `myProp`\n        // because we have updated its backing property.\n        notifyChange(this, "myProp");\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Other cases where notifyChange needs to be called are similar and usually involve a getter that derives its value from other properties either on the current object, on referenced objects, or from static or global properties."}),"\n",(0,a.jsx)(t.h4,{id:"onwatch",children:(0,a.jsx)(t.code,{children:"onWatch"})}),"\n",(0,a.jsxs)(t.p,{children:["Sometimes, you need to know when a property is being watched. This is what ",(0,a.jsx)(t.code,{children:"onWatch"})," is for, it calls a callback whenever the specified property on an object starts being watched."]}),"\n",(0,a.jsxs)(t.p,{children:["The function came about from a common pattern we saw in our codebase where we would create a watch to call notifyChange on a local property. By wrapping this pattern in this function we\u2019re now able to avoid the overhead of watching a property to call ",(0,a.jsx)(t.code,{children:"notifyChange"})," for another property when no one is actually watching the property we are notifying for."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyClass extends observable() {\n    _foo = "foo";\n    _bar = "bar";\n    get foo() {\n        return `${this._foo} ${this._bar}`;\n    }\n    get bar() {\n        return this._bar;\n    }\n    set bar(value: string) {\n        this._bar = value;\n    }\n}\n\nconst myClass = new MyClass();\n\nconst handle = onWatch(myClass, "foo", () =>\n    watch(myClass, "bar", () => notifyChange(myClass, "foo"), {\n        // We use sync: true here so the notify is synchronous.\n        // This ensures that any watches on the property being\n        // changed can respond sync or async as they are configured.\n        sync: true,\n    })\n);\n\n// Call remove on the returned handle when the onWatch is no longer needed.\nhandle.remove();\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"onWatch"})," expects the callback it is given to return an IHandle, the handle returned by the callback will be called when the property ",(0,a.jsx)(t.code,{children:"onWatch"})," is monitoring is no longer being watched by anything."]}),"\n",(0,a.jsx)(t.h4,{id:"watcheach",children:(0,a.jsx)(t.code,{children:"watchEach"})}),"\n",(0,a.jsxs)(t.p,{children:["When you need to watch for changes on objects in a ",(0,a.jsx)(t.code,{children:"Collection"}),", you can use ",(0,a.jsx)(t.code,{children:"watchEach"}),". ",(0,a.jsx)(t.code,{children:"watchEach"})," allows you to watch a ",(0,a.jsx)(t.code,{children:"Collection"})," or specify a path to a property on an object that contains a ",(0,a.jsx)(t.code,{children:"Collection"})," and watch for changes to a property that exists on the items in the ",(0,a.jsx)(t.code,{children:"Collection"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyObservable extends observable() {\n    property: string = "testProperty";\n}\n\nclass MyClass extends observable() {\n    collection: Collection<MyObservable> = new Collection();\n}\n\nconst myClass = new MyClass();\nconst handle1 = watchEach(\n    myClass,\n    "collection.[].property",\n    (newValue, oldValue) => {}\n);\n\nconst myCollection = new Collection<MyObservable>();\nconst handle2 = watchEach(\n    myCollection,\n    "[].property",\n    (newValue, oldValue) => {}\n);\n\n// Call remove on the returned handle when the watchEach is no longer needed.\nhandle1.remove();\nhandle2.remove();\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"[]."})," syntax was created to help the watch system determine where the ",(0,a.jsx)(t.code,{children:"Collection"})," starts so it can iterate over the ",(0,a.jsx)(t.code,{children:"Collection"})," to watch the items in it as appropriate."]}),"\n",(0,a.jsx)(t.h4,{id:"watchevent",children:(0,a.jsx)(t.code,{children:"watchEvent"})}),"\n",(0,a.jsxs)(t.p,{children:["There are times when you want to subscribe to an event on the value of a property, but that property\u2019s value can change. ",(0,a.jsx)(t.code,{children:"watchEvent"})," is a convenience function that makes handling this case a bit easier than managing the watch and event subscriptions yourself."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// The watch callback is optional. It is called when the value of the watched property changes.\nconst handle = watchEvent(\n    myObj,\n    "myProp",\n    ["change", eventCallback],\n    watchCallback\n);\n\n// Call remove on the returned handle when the `watchEvent` is no longer needed.\nhandle.remove();\n'})}),"\n",(0,a.jsx)(t.h4,{id:"once",children:(0,a.jsx)(t.code,{children:"once"})}),"\n",(0,a.jsxs)(t.p,{children:["This is a convenience function to make it easier to ",(0,a.jsx)(t.code,{children:"await"})," for a property change if you only need to wait for one change. You can pass an ",(0,a.jsx)(t.code,{children:"AbortSignal"})," to the options to cancel waiting, in which case the returned promise will be aborted."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'await once(obj, "myProp", { signal });\n'})}),"\n",(0,a.jsx)(t.h4,{id:"when",children:(0,a.jsx)(t.code,{children:"when"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"when"})," allows you to react to a property becoming truthy. (Truthy and falsy are common terms in JavaScript, if unfamiliar see ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",children:"Truthy"})," and ",(0,a.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",children:"Falsy"}),"). ",(0,a.jsx)(t.code,{children:"when"})," will invoke the given callback whenever the property\u2019s value becomes truthy."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyClass extends observable() {\n    myProp: string | undefined = undefined;\n}\n\nconst obj = new MyClass();\n\nconst handle = when(obj, "myProp", callback);\n\n// Setting the property value to a falsy value will not invoke the callback.\nobj.myProp = "";\n\n// Setting the property value to a truthy value will invoke the callback.\nobj.myProp = "test value";\n\n// Call remove on the returned handle when the `when` is no longer needed.\nhandle.remove();\n'})}),"\n",(0,a.jsx)(t.p,{children:"If the value of the property being watched is already truthy, the callback will be invoked immediately."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"when"})," function accepts some options to modify its behavior."]}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Option"}),(0,a.jsx)("th",{children:"Description"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"sync"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"Whether or not the callback will be called synchronously.\nDefault is false."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"once"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"If true, the callback will only be called once on the very\nfirst property change. Default is false."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"invert"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"If true, the callback will be called when the property\nvalue becomes falsy. Default is false."})})]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'when(myClass, "myProp", callback, {\n    sync: true,\n    invert: true,\n    once: true,\n});\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In regards to the ",(0,a.jsx)(t.code,{children:"sync"})," option, it is recommended to avoid using this when possible and instead allow your callback to be invoked async. Reacting to property changes asynchronously gives more room for the JS event loop to continue with other async work including user interactions, creating a better user experience."]}),"\n",(0,a.jsx)(t.h4,{id:"whenonce",children:(0,a.jsx)(t.code,{children:"whenOnce"})}),"\n",(0,a.jsxs)(t.p,{children:["This is a convenience function to make it easier to ",(0,a.jsx)(t.code,{children:"await"})," for a property to become truthy if you only need to wait for one change. You can pass an ",(0,a.jsx)(t.code,{children:"AbortSignal"})," to the options to cancel waiting, in which case the returned promise will be aborted."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'await whenOnce(obj, "myProp", { signal });\n'})}),"\n",(0,a.jsx)(t.h4,{id:"createihandle",children:(0,a.jsx)(t.code,{children:"createIHandle"})}),"\n",(0,a.jsxs)(t.p,{children:["Creating a number of watches in one place is fairly common, which results in having a number of returned handles to deal with. To help simplify some situations we\u2019ve added this utility function ",(0,a.jsx)(t.code,{children:"createIHandle"})," that takes an ",(0,a.jsx)(t.code,{children:"Iterable<IHandle>"})," and returns a single ",(0,a.jsx)(t.code,{children:"IHandle"}),". This is useful when combined with ",(0,a.jsx)(t.code,{children:"onWatch"})," but also other scenarios."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'onWatch(this, "myProp", () => {\n  const handles: IHandle[] = [];\n  handles.push(\n    watch(otherObj, "otherProp", () => notifyChange(this, "myProp"));\n    watch(anotherObj, "anotherProp", () => notifyChange(this, "myProp"));\n  );\n  return createIHandle(handles);\n});\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The returned handle from ",(0,a.jsx)(t.code,{children:"createIHandle"})," holds a reference to the iterable and will remove the handles currently held in the iterable when called, allowing you to update the iterable with new handles or remove old ones but still use the same returned handle to remove whatever is left in the iterable."]}),"\n",(0,a.jsx)(t.h3,{id:"what-did-we-deprecate",children:"What did we Deprecate?"}),"\n",(0,a.jsxs)(t.p,{children:["All classes that were inheriting from ",(0,a.jsx)(t.code,{children:"Observable"})," (@vertigis/arcgis-extensions/support/Observable.ts) no longer inherit from ",(0,a.jsx)(t.code,{children:"Observable"}),". Most have been updated to use the new mixin, however ",(0,a.jsx)(t.code,{children:"SerializableBase"})," has not been updated to use the mixin as it did not make sense for this class to be observable on its own. Every class, including ",(0,a.jsx)(t.code,{children:"SerializableBase"}),", that no longer inherits from ",(0,a.jsx)(t.code,{children:"Observable"})," has had deprecated methods added to temporarily provide the previous methods from ",(0,a.jsx)(t.code,{children:"Observable"}),". Support for ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," for all classes that were previously inheriting from ",(0,a.jsx)(t.code,{children:"Observable"})," will still work as well during the transition period."]}),"\n",(0,a.jsx)(t.p,{children:"If you\u2019re unsure if you have any references to anything that will be removed, you can check the browser console; all deprecated functions, classes, and modules that are still in use are logged there as warnings."}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Deprecation"}),(0,a.jsx)("th",{children:"Replacement"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"observable"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable.watch"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watch"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable_watchProperty"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watch"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable.notifyChange"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"notifyChange"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable.get"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:"No replacement. Access the property directly instead."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Observable.set"}),"\n(@vertigis/arcgis-extensions/support/Observable.ts)"]})}),(0,a.jsx)("td",{children:"No replacement. Access the property directly instead."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watchEach"}),"\n(@vertigis/arcgis-extensions/utilities/watch.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watchEach"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watchCollectionPropertyEach"}),"\n(@vertigis/arcgis-extensions/utilities/watch.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watchEach"}),"\n(@vertigis/arcgis-extensions/support/observableUtils.ts)"]})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"ObservableWeakSet"}),"\n(@vertigis/arcgis-extensions/utilities/ObservableWeakSet.ts)"]})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.p,{children:"No replacement. This class did not make sense. You can't\nobserve a weak set for changes."})})]})]}),"\n",(0,a.jsxs)(t.h4,{id:"reactiveutils-support",children:[(0,a.jsx)(t.code,{children:"reactiveUtils"})," Support"]}),"\n",(0,a.jsxs)(t.p,{children:["At the time of writing this, ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," will still work with VertiGIS Studio Web (Web) classes. We\u2019ve ensured backwards compatibility for the moment.\nHowever, moving forward, we do plan to remove support for ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," from Web entirely, so using ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," inside of Web or the Web SDK is now considered deprecated. Instead, Web SDK developers should use ",(0,a.jsx)(t.code,{children:"observableUtils"})," only, even with ArcGIS JS SDK classes. This will insulate everyone from changes to the ArcGIS JS SDK watch system in the future and will eventually allow us to clean up a lot of memory leaks. It should also improve performance of Web and Web SDK apps once backwards compatibility is removed."]}),"\n",(0,a.jsxs)(t.h4,{id:"certain-usewatch-and-usewatch-variant-overloads",children:["Certain ",(0,a.jsx)(t.code,{children:"useWatch"})," and ",(0,a.jsx)(t.code,{children:"useWatch"})," Variant Overloads"]}),"\n",(0,a.jsxs)(t.p,{children:["As a consequence of the new watch pattern and the deprecation of using ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," inside Web, the ",(0,a.jsx)(t.code,{children:"useWatch"})," overloads that use the watch value callback pattern similar to ",(0,a.jsx)(t.code,{children:"reactiveUtils"})," ",(0,a.jsx)(t.code,{children:"watch"})," have been deprecated. We\u2019ve also deprecated passing an array of property paths to ",(0,a.jsx)(t.code,{children:"useWatch"})," and some specific ",(0,a.jsx)(t.code,{children:"useWatch"})," variants, however we have maintained the array pattern for ",(0,a.jsx)(t.code,{children:"useWatchAndRerender"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["We\u2019ve also deprecated the ",(0,a.jsx)(t.code,{children:"useWatch"})," callback that has the ",(0,a.jsx)(t.code,{children:"propertyName"})," and ",(0,a.jsx)(t.code,{children:"target"}),". In future, ",(0,a.jsx)(t.code,{children:"useWatch"})," will only pass the ",(0,a.jsx)(t.code,{children:"newValue"})," and ",(0,a.jsx)(t.code,{children:"oldValue"})," arguments to the callback."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'/** Deprecated */\nuseWatch(() => myObj.myProp, callback);\n/** Use instead */\nuseWatch(myObj, "myProp", callback);\n\n/** Deprecated */\nuseWatch(myObj, ["myProp1", "myProp2"], callback);\n/** Use instead */\nuseWatch(myObj, "myProp1", callback);\nuseWatch(myObj, "myProp2", callback);\n\n/** Deprecated */\nuseWatchAndRerender(() => myObj.myProp);\n/** Use instead */\nuseWatchAndRerender(myObj, "myProp");\n\n/** Deprecated */\nuseWatchInit(() => myObj.myProp, callback);\n/** Use instead */\nuseWatchInit(myObj, "myProp", callback);\n\n/** Deprecated */\nuseWatchInit(myObj, ["myProp1", "myProp2"], callback);\n/** Use instead */\nuseWatchInit(myObj, "myProp1", callback);\nuseWatchInit(myObj, "myProp2", callback);\n\n/** Deprecated */\nuseWatchEach(() => myObj.myProp, callback);\n/** Use instead */\nuseWatchEach(myObj, "myProp", callback);\n\n/** Deprecated */\nuseWatchEach(myObj, ["myProp1", "myProp2"], callback);\n/** Use instead */\nuseWatchEach(myObj, "myProp1", callback);\nuseWatchEach(myObj, "myProp2", callback);\n\n/** Deprecated */\nuseWatchEachAndRerender(() => myObj.myProp);\n/** Use instead */\nuseWatchEachAndRerender(myObj, "myProp");\n'})}),"\n",(0,a.jsx)(t.h3,{id:"common-anti-patterns-to-avoid",children:"Common Anti-Patterns to Avoid"}),"\n",(0,a.jsx)(t.p,{children:"We\u2019ve seen various different anti-patterns over the years with the previous watch system that will likely continue with the new one. We\u2019re calling them out here to try to make people aware of these anti-patterns and their consequences of being used."}),"\n",(0,a.jsx)(t.p,{children:"Also, with the addition of new watch functionality, there are also some new anti-patterns we expect to see come up from time to time that should also be avoided."}),"\n",(0,a.jsxs)(t.h4,{id:"watching-a-property-on-this",children:["Watching a Property on ",(0,a.jsx)(t.code,{children:"this"})]}),"\n",(0,a.jsxs)(t.p,{children:["Please pay close attention to watches that use ",(0,a.jsx)(t.code,{children:"this"})," as the watch object. This is an anti-pattern and should be avoided."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'watch(this as MyClass, "myProp", callback);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["While it is simple to create a watch and sometimes more complicated to get the right behavior with other options, it is still less performant to use the watch system for watching a property on ",(0,a.jsx)(t.code,{children:"this"})," than other options, like using an accessor property instead and calling your callback equivalent in the setter, even with our new watch system."]}),"\n",(0,a.jsxs)(t.h4,{id:"watch-callback-invokes-notifychange",children:[(0,a.jsx)(t.code,{children:"watch"})," Callback Invokes ",(0,a.jsx)(t.code,{children:"notifyChange"})]}),"\n",(0,a.jsxs)(t.p,{children:["Using a watch with ",(0,a.jsx)(t.code,{children:"notifyChange"})," for a property on the current object when not wrapped in ",(0,a.jsx)(t.code,{children:"onWatch"})," is now an anti-pattern."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// This is an anti-pattern.  Wrap this in onWatch instead.\nwatch(this.obj, "objProp", () => notifyChange(this, "myProp"));\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The above is always watching and notifying about those properties, even if no one cares. While this is a common pattern, and needed in most cases where it is used, we\u2019ve introduced a new function called ",(0,a.jsx)(t.code,{children:"onWatch"})," to assist with this situation and make it more performant by only initiating the watch once it is actually needed making this pattern a new anti-pattern. See ",(0,a.jsx)(t.a,{href:"/blog/2025/08/05/web-observable-overhaul#onwatch",children:(0,a.jsx)(t.code,{children:"onWatch"})})," for an example of the new pattern to use."]}),"\n",(0,a.jsxs)(t.h4,{id:"calling-notifychange-in-a-setter-for-the-property-being-set",children:["Calling ",(0,a.jsx)(t.code,{children:"notifyChange"})," in a Setter for the Property Being Set"]}),"\n",(0,a.jsxs)(t.p,{children:["There is no need to call ",(0,a.jsx)(t.code,{children:"notifyChange"})," inside a setter for the property the setter is for. Doing so creates a bit of extra work that is not necessary."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'class MyClass extends observable() {\n    get myProp() {\n        return this._backingProp;\n    }\n    set myProp(value: number) {\n        this._backingProp = value;\n        // There is no need to call this notifyChange for this property.\n        // The watch system is able to detect this change on its own.\n        notifyChange(this, "myProp");\n\n        // We do need to call notifyChange for myOtherProp though.\n        notifyChange(this, "myOtherProp");\n    }\n\n    get myOtherProp() {\n        return this._backingProp + 1;\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.h4,{id:"using-oncollectionpropertychange-but-ignoring-the-passed-event-object",children:["Using ",(0,a.jsx)(t.code,{children:"onCollectionPropertyChange"})," But Ignoring the Passed Event Object"]}),"\n",(0,a.jsxs)(t.p,{children:["If you're using ",(0,a.jsx)(t.code,{children:"onCollectionPropertyChange"})," (@vertigis/arcgis-extensions/utilities/watch.ts) to detect changes but the actual change event value was being ignored, please use ",(0,a.jsx)(t.code,{children:"watchEvent"})," (@vertigis/arcgis-extensions/support/observableUtils.ts) instead as it will have better performance when the underlying watched property changes."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'function collectionPropertyChange() {\n    console.log(\n        "do something that doesn\u2019t require the change event value"\n    );\n}\n\n/** Do not do this **/\nonCollectionPropertyChange(\n    myObj,\n    "myCollectionProp",\n    collectionPropertyChange\n);\n\n/** Instead, do this **/\nwatchEvent(\n    myObj,\n    "myCollectionProp",\n    ["change", collectionPropertyChange],\n    collectionPropertyChange\n);\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"watchEvent"})," has two callbacks, one for the event and one for when the property being watched changes. By using the same callback for both, the callback will be invoked when the property value itself changes as well as the when the event is fired, creating the equivalent behavior of ",(0,a.jsx)(t.code,{children:"onCollectionPropertyChange"}),", but without the difference being calculated between the two different ",(0,a.jsx)(t.code,{children:"Collection"}),"s when the property value changes."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}},5284:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/08/05/web-observable-overhaul","source":"@site/blog/2025-08-05-web-observable-overhaul.mdx","title":"VertiGIS Studio Web 5.37 Observable Overhaul","description":"The recent deprecation of the .watch method in the ArcGIS Maps SDK for JavaScript caused a cascade effect on key underlying property observability behavior in VertiGIS Studio Web.","date":"2025-08-05T00:00:00.000Z","tags":[{"inline":true,"label":"web","permalink":"/blog/tags/web"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"}],"readingTime":40.06,"hasTruncateMarker":true,"authors":[{"name":"Brenda Parker","title":"Software Developer","url":"https://github.com/bparker-dev","imageURL":"https://github.com/bparker-dev.png","key":null,"page":null}],"frontMatter":{"title":"VertiGIS Studio Web 5.37 Observable Overhaul","author":"Brenda Parker","authorTitle":"Software Developer","authorURL":"https://github.com/bparker-dev","authorImageURL":"https://github.com/bparker-dev.png","tags":["web","sdk"]},"unlisted":false,"nextItem":{"title":"Using AI Image Recognition with the VertiGIS Studio Mobile SDK","permalink":"/blog/2025/06/04/mobile-sdk-ai-image-recognition"}}')}}]);