"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[5292],{3096:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>h});var n=i(8813),a=i(4848),s=i(8453);i(8774),i(6025);const o={title:"Using AI Image Recognition with the VertiGIS Studio Mobile SDK",author:"Felicity Rhone",authorTitle:"Software Developer",authorURL:"https://github.com/Felicity-R",authorImageURL:"https://github.com/felicity-r.png",tags:["mobile","sdk","samples","ai"]},r=void 0,l={authorsImageUrls:[void 0]},h=[{value:"Overview",id:"overview",level:2},{value:"Implementing the custom project",id:"implementing-the-custom-project",level:2},{value:"The AI Service",id:"the-ai-service",level:3},{value:"The Mobile integration",id:"the-mobile-integration",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"AI has been a hot topic lately. Naturally, the question has come up of how we can use AI with Studio products. With the Mobile SDK, it's already possible to integrate AI into a custom app. In this blog post I'll describe an example of just that, where we'll use AI image recognition to help create features."}),"\n",(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(t.p,{children:"In this sample, we use AI image recognition to populate attributes in a new feature. The high level flow looks like this:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Capture an image from your device"}),"\n",(0,a.jsx)(t.li,{children:"Pass the image and a custom prompt into the AI service"}),"\n",(0,a.jsx)(t.li,{children:"Parse the AI response into feature attributes"}),"\n",(0,a.jsx)(t.li,{children:"Create a feature from these attributes, with the image as an attachment"}),"\n",(0,a.jsx)(t.li,{children:"Have the user review the generated feature and modify any fields if desired"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"There are several advantages to this kind of flow. For one thing, it allows you to fill in fields with data you may not know, like the scientific name of a particular tree, without having to look it up elsewhere. Another is that it speeds up the data entry process\u2014typing on a Mobile device in particular can be cumbersome, so starting with the fields filled out just ready for you to review is a nice benefit."}),"\n",(0,a.jsx)(t.h2,{id:"implementing-the-custom-project",children:"Implementing the custom project"}),"\n",(0,a.jsxs)(t.p,{children:["We have ",(0,a.jsx)(t.a,{href:"https://github.com/vertigis/vertigis-mobile-quickstart",children:"a Quickstart project"})," already available on GitHub to help expedite the process of creating a custom Studio Mobile app. The code for this AI demo builds on the Quickstart as a base. You can find ",(0,a.jsx)(t.a,{href:"https://github.com/vertigis/vertigis-mobile-custom-extension-with-AI",children:"the full project on GitHub"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"the-ai-service",children:"The AI Service"}),"\n",(0,a.jsxs)(t.p,{children:["Our sample here uses a model from ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/ai-services/openai/overview",children:"Azure OpenAI"}),". Note that this model was not specifically trained to identify trees, though the results are still quite good. However, bear in mind that for your own real-life use cases you may want to use your own model rather than a generic one like this, in order to get better accuracy; particularly if your domain requires more niche expertise. That is outside the scope of this sample."]}),"\n",(0,a.jsxs)(t.p,{children:["The AI service is set up in ",(0,a.jsx)(t.a,{href:"https://github.com/vertigis/vertigis-mobile-custom-extension-with-AI/blob/master/App1/OpenAIAssistant.cs",children:"OpenAIAssistant.cs"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",metastring:"showLineNumbers=7",children:'internal class OpenAIAssistant\n{\n\t// highlight-next-line\n    /** INSERT YOUR OWN DEPLOYMENT NAME / ENDPOINT / KEY HERE **/\n    private const string deploymentName = "";\n    private const string endpoint = "";\n    private const string key = "";\n\n    private AzureOpenAIClient _openAIClient;\n\n    public OpenAIAssistant()\n    {\n        _openAIClient = new AzureOpenAIClient(new Uri(endpoint), new AzureKeyCredential(key));\n    }\n\n    public async Task<ChatCompletion> QueryImageAsync(byte[] imageData, List<string> queries, string systemPrompt)\n    {\n        // Limit image to 2MB for quick response and less tokens used\n        if (imageData.Length > 2097152)\n        {\n            throw new ArgumentException("Image exceeded 2MB, try downsizing the image");\n        }\n\n        if (imageData.Length == 0)\n        {\n            throw new ArgumentException("Image is invalid");\n        }\n\n        // highlight-start\n        var chatClient = _openAIClient.GetChatClient(deploymentName);\n        var chatContent = ChatMessageContentPart.CreateImagePart(imageBytes: BinaryData.FromBytes(imageData), "image/png");\n        var systemChatMessage = new SystemChatMessage(systemPrompt);\n        var imageChatMessage = new UserChatMessage(chatContent);\n\n        var chatMessages = new List<ChatMessage>\n        {\n            systemChatMessage,\n            imageChatMessage,\n        };\n\n        foreach (var query in queries)\n        {\n            var userChatMessage = new UserChatMessage(query);\n            chatMessages.Add(userChatMessage);\n        }\n        // highlight-end\n\n        // highlight-next-line\n        var chatCompletionOptions = new ChatCompletionOptions() { ResponseFormat = ChatResponseFormat.CreateJsonObjectFormat()};\n        ChatCompletion chatCompletion = await chatClient.CompleteChatAsync(chatMessages, chatCompletionOptions);\n        return chatCompletion;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Note that there are variables for a deployment name, endpoint URL and a key at the top of the file (lines 10-12). You will need to have your own values there in order to actually make the AI queries.\nFrom line 34 to 49, we configure the chat client with a message and image which will be passed in by the caller - in QuickCaptureService.cs - described in the next section.\nThe system prompt passed in on line 36 provides the model with context for any the queries we will be making.\nThe ResponseFormat option being set to json on line 51 will make parsing the response easier."}),"\n",(0,a.jsxs)(t.p,{children:["You can learn more about how to interact with OpenAI models in the ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/ai-services/openai/",children:"Azure documentation"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"the-mobile-integration",children:"The Mobile integration"}),"\n",(0,a.jsxs)(t.p,{children:["Integrating the AI service with Mobile and creating the feature happens in ",(0,a.jsx)(t.a,{href:"https://github.com/vertigis/vertigis-mobile-custom-extension-with-AI/blob/master/App1/QuickCaptureService.cs",children:"QuickCaptureService.cs"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["First, we ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/sdk-services-create",children:"create the service"})," and ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/sdk-services-create#create-a-custom-command",children:"set up a custom command"}),". This command can then be invoked from the I Want To... menu or from a button within the Mobile app, for example."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",children:'// highlight-next-line\n[assembly: Service(typeof(QuickCaptureService))]\nnamespace App1\n{\n    // highlight-next-line\n    public class QuickCaptureService : ServiceBase\n    {\n        private AllOperations _ops;\n        private IDialogController _dialog;\n        private MapRepository _mapRepo;\n        private OpenAIAssistant _openAIAssistant;\n\n        public QuickCaptureService(CommonAppDependencies deps)\n        {\n            // Save some objects we\'ll want later\n            _ops = deps.Operations;\n            _dialog = deps.DialogController;\n            _mapRepo = deps.MapRepo;\n            _openAIAssistant = new OpenAIAssistant();\n\n            // Register our custom command. This is called by name later from the "I Want To..." menu.\n            // highlight-next-line\n            deps.OperationRegistry.VoidOperation("custom.quick-capture").RegisterExecute(DoQuickCaptureAsync, this);\n        }\n\n        private async Task DoQuickCaptureAsync()\n        {\n            ...\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Then we can fill in the contents of DoQuickCaptureAsync; the command implementation."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cs",metastring:"showLineNumbers=48",children:'private async Task DoQuickCaptureAsync()\n{\n    // Get the map (the first/only available map), and the layer we want to add to\n    var map = _mapRepo.AllMaps.EnumerateExisting().First().MapExtension;\n    // highlight-next-line\n    var layerExt = map.LayerExtensions.FindByLayerId("1968288a255-layer-2"); // 1968288a255-layer-2 = the trees layer\n    var table = layerExt.GetFeatureTable();\n\n    // Get current location (will place feature there)\n    var position = await _ops.GeolocationOperations.GetPosition.ExecuteAsync();\n    position = HandleZAndMValues(table, position);\n\n    // highlight-next-line\n    EnhancedFileData fileData = await GetPhotoFromUser();\n\n    await _ops.UIOperations.DisplayBusyState.ExecuteAsync();\n\n    var systemPrompt = "You are a helpful assistant knowledgeable about trees";\n\n    var queries = new List<string>\n    {\n        """\n        // highlight-start\n        Fill out the following information about a specific tree, from the given image.\n        {\n            CommonName:\n            ScientificName:\n            Family:\n            ConservationStatus:\n            Health:\n        }\n        \'Health\' should be an evaluation of the health of the individual tree pictured.\n        // highlight-end\n        Respond only with JSON.\n        """,\n    };\n\n    // highlight-next-line\n    var response = await _openAIAssistant.QueryImageAsync(fileData.Data, queries, systemPrompt);\n    Dictionary<string, object?> attributes = GetAttributesFromResponse(response.Content[0].Text);\n\n    // Create the new feature\n    var vertiGISFeature = await GetNewFeature(layerExt, table, position, attributes);\n\n    // Add the photo as an attachment on the feature\n    var attachmentArgs = new AddAttachmentArgs(fileData, [vertiGISFeature], map);\n    // highlight-next-line\n    await _ops.EditOperations.AddAttachment.ExecuteAsync(attachmentArgs);\n\n    await _ops.ResultsOperations.DisplayDetails.ExecuteAsync(vertiGISFeature);\n\n    // Launch the feature editing form so user can tweak values if necessary\n    // highlight-next-line\n    await _ops.EditOperations.DisplayUpdateFeature.ExecuteAsync(vertiGISFeature);\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Line 52 has the layer ID for our sample trees layer. You'd want to replace it with your own layer. Although you could have a more complicated use case where the layer is populated dynamically, this process tends to work best with a specific known layer, so that you can tell the AI model exactly the attribute names you're looking for and what the values should look like. The prompt, starting on line 68, illustrates this: the keys listed there correspond exactly to the tree layer's attribute names. This makes it easy to convert the json response from the AI service directly into a feature without having to do any extra parsing."}),"\n",(0,a.jsx)(t.p,{children:'We found that the AI Model did a fine job of inferring what kind of value we were looking for for most of the attributes just based on the name. However, for the "Health" attribute, the model was giving us responses that referred to the health of the species of tree in general, rather than doing a specific assessment for the individual specimen in the photo. For example, it would give us "this is a hardy species but is susceptible to root rot", rather than "this tree shows signs of a caterpillar infestation". Hence we included a note in the prompt clarifying the intention of that field (line 76). If you have a similar setup, where your attribute names may not be intuitive, or perhaps the values have to be constrained to a certain data type like enum values, you can elaborate on that here.'}),"\n",(0,a.jsxs)(t.p,{children:["To get the image, we'll use the Mobile's ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/api-commands-operations#operation-photos.take-photo",children:"TakePhoto operation"}),". In this sample we also have the option of launching a file picker, to make testing easier."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Be sure you allow your SDK apps to access the camera and/or file picker in your app, ",(0,a.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/appmodel/permissions?view=net-maui-9.0&tabs=android#platform-differences",children:"as required for each platform"}),"."]})}),"\n",(0,a.jsxs)(t.p,{children:["Starting on line 81 is where we we call the AI service, get the attributes from the AI response, and create a feature. Note that we convert the feature into ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/web/api-objects/#feature",children:"a VertiGIS Feature"})," type: this enables us to work with it more easily in other Mobile SDK functions, such as ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/api-commands-operations#command-edit.add-attachment",children:"adding the attachment"})," (line 89) and ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/api-commands-operations#command-edit.display-update-feature",children:"activating feature editing"})," (line 94)."]}),"\n",(0,a.jsxs)(t.p,{children:["Our documentation page ",(0,a.jsx)(t.a,{href:"https://developers.vertigisstudio.com/docs/mobile/sdk-edit-layout-app-config",children:"Edit the Layout and App Config"})," explains the final piece of the puzzle, which is setting up your SDK app to point to your webmap, with the trees layer in this sample, and defining the layout (including adding a place to launch our custom AI command)."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>r});var n=i(6540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},8813:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/06/04/mobile-sdk-ai-image-recognition","source":"@site/blog/2025-06-04-mobile-sdk-ai-image-recognition.mdx","title":"Using AI Image Recognition with the VertiGIS Studio Mobile SDK","description":"AI has been a hot topic lately. Naturally, the question has come up of how we can use AI with Studio products. With the Mobile SDK, it\'s already possible to integrate AI into a custom app. In this blog post I\'ll describe an example of just that, where we\'ll use AI image recognition to help create features.","date":"2025-06-04T00:00:00.000Z","tags":[{"inline":true,"label":"mobile","permalink":"/blog/tags/mobile"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"samples","permalink":"/blog/tags/samples"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"}],"readingTime":7.61,"hasTruncateMarker":true,"authors":[{"name":"Felicity Rhone","title":"Software Developer","url":"https://github.com/Felicity-R","imageURL":"https://github.com/felicity-r.png","key":null,"page":null}],"frontMatter":{"title":"Using AI Image Recognition with the VertiGIS Studio Mobile SDK","author":"Felicity Rhone","authorTitle":"Software Developer","authorURL":"https://github.com/Felicity-R","authorImageURL":"https://github.com/felicity-r.png","tags":["mobile","sdk","samples","ai"]},"unlisted":false,"prevItem":{"title":"VertiGIS Studio Web 5.37 Observable Overhaul","permalink":"/blog/2025/08/05/web-obervable-overhaul"},"nextItem":{"title":"Override Search Area in VertiGIS Studio Mobile","permalink":"/blog/2025/05/02/mobile-override-search-area"}}')}}]);