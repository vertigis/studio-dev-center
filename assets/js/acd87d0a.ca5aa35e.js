"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[7991],{2135:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var i=o(964),r=o(4848),n=o(8453),s=(o(8774),o(6025));const a={title:"Converting a VertiGIS Studio Mobile SDK project to .NET MAUI",author:"Felicity Rhone",authorTitle:"Software Developer",authorURL:"https://github.com/Felicity-R",authorImageURL:"https://github.com/felicity-r.png",tags:["mobile","maui","sdk","samples"]},l=void 0,d={authorsImageUrls:[void 0]},c=[{value:"Step 1 - Run the .NET Upgrade Assistant",id:"step-1---run-the-net-upgrade-assistant",level:2},{value:"Step 2 - Upgrade packages",id:"step-2---upgrade-packages",level:2},{value:"Step 3 - Remove any lingering outdated references",id:"step-3---remove-any-lingering-outdated-references",level:2},{value:"Step 4 - Fix other build errors",id:"step-4---fix-other-build-errors",level:2},{value:"Step 5 - Migrate code from *.original files",id:"step-5---migrate-code-from-original-files",level:2},{value:"Step 6 - Fix runtime errors",id:"step-6---fix-runtime-errors",level:2},{value:"Step 7 - Update outdated controls",id:"step-7---update-outdated-controls",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["As of our 5.30 release, VertiGIS Studio Mobile has been migrated from Xamarin Forms to .NET MAUI, on .NET 8. We've now completed work to support MAUI in our nuget package as well, so the time has come for any Xamarin Forms projects using our SDK to do their own migration.\nIn this blog post I'll walk you through the process, using our ",(0,r.jsx)(t.a,{href:"https://github.com/vertigis/vertigis-mobile-samples",children:"VertiGIS Mobile Samples"})," project as an example."]}),"\n",(0,r.jsxs)(t.p,{children:["You can find the PR for this conversion in our samples repo here: ",(0,r.jsx)(t.a,{href:"https://github.com/vertigis/studio-dev-center/pull/79",children:"https://github.com/vertigis/studio-dev-center/pull/79"})]}),"\n",(0,r.jsxs)(t.p,{children:["There are some helpful guides out there already. For example, Microsoft has written ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/migration/upgrade-assistant?view=net-maui-9.0&tabs=vswin",children:(0,r.jsx)(t.em,{children:"Upgrade a Xamarin.Forms app to a .NET MAUI app with the .NET Upgrade Assistant"})})," and\n",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/migration/multi-project-to-single-project?view=net-maui-9.0",children:(0,r.jsx)(t.em,{children:"Manually upgrade a Xamarin.Forms app to a single project .NET MAUI app"})}),", which I do recommend checking out.\nHowever, I will detail some specific errors I encountered along the way, which may provide some extra help."]}),"\n",(0,r.jsxs)(t.p,{children:["The method I'll be going through will result in one shared project, and separate projects for each platform - the structure you're probably familiar with from your Xamarin Forms app. It is possible afterwards to merge these projects together to take advantage of MAUI's convenient single-project structure. To do so, I recommend creating a brand new single-project MAUI app and moving your files over, the way Microsoft describes in their \"",(0,r.jsx)(t.em,{children:"Manually upgrade [...]"}),"\" article I linked above.\nThis blog post will not talk about the process of converting custom Renderers to use the new MAUI Handler pattern, but if you do have custom Renderers that is something you'll have to handle as well during your upgrade process."]}),"\n",(0,r.jsx)(t.h2,{id:"step-1---run-the-net-upgrade-assistant",children:"Step 1 - Run the .NET Upgrade Assistant"}),"\n",(0,r.jsxs)(t.p,{children:["We'll be using the ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview",children:".NET Upgrade Assistant"})," to help us through the first step.\nIt won't get you to 100%, but it's a good starting point. You can find installation instructions ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/migration/upgrade-assistant?view=net-maui-8.0&tabs=vswin#installation",children:"here"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Once you've installed it, run the tool on each project in your Xamarin Forms solution, to upgrade it to a newer .NET version - in this case, .NET 8 (which will also necessarily migrate your project from Xamarin Forms to MAUI)."}),"\n",(0,r.jsx)(t.h2,{id:"step-2---upgrade-packages",children:"Step 2 - Upgrade packages"}),"\n",(0,r.jsx)(t.p,{children:"The Upgrade Assistant will have done some package updates automatically, but not all of them.\nIf you're referencing any Esri ArcGIS Runtime packages, you'll need to upgrade those from 100.x to the 200.x version (as of writing this post, Mobile is using 200.5).\nIn some cases you'll need a different package rather than just changing the version number; for example, Esri.ArcGISRuntime.Xamarin.Forms is replaced by Esri.ArcGISRuntime.MAUI."}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)(t.p,{children:["For the VertiGIS.Mobile nuget package, you'll need to update to version 5.34.x.\nNote: due to ",(0,r.jsx)(t.a,{href:"https://github.com/dotnet/maui/issues/19840",children:"a known MAUI issue (Issue #19840)"}),",\nyou'll need to add ",(0,r.jsx)(t.code,{children:'ExcludeAssets="buildTransitive;build" PrivateAssets="all"'})," to your package reference for the Mobile package - only in your base shared project. It's not necessary to add in the platform-specific projects. So it'll look like this:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<PackageReference Include="VertiGIS.Mobile" Version="5.34.0" ExcludeAssets="buildTransitive;build" PrivateAssets="all" />\n'})}),(0,r.jsx)(t.p,{children:"This issue only affects multi-projects; if you're converting to a single-project, it won't be necessary."})]}),"\n",(0,r.jsxs)(t.admonition,{title:"Important",type:"info",children:[(0,r.jsxs)(t.p,{children:["There's also a new step you'll need to add to use our package: in the MAUIProgram.cs file for each of the platform projects, you'll need to add a call to ",(0,r.jsx)(t.code,{children:"UseStudioMobile"}),". It should end up looking like this:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"public static MAUIApp CreateMAUIApp()\n{\n    var builder = MAUIApp.CreateBuilder();\n\n    builder\n    .UseSharedMAUIApp()\n    // highlight-next-line\n    .UseStudioMobile();\n\n    return builder.Build();\n}\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"step-3---remove-any-lingering-outdated-references",children:"Step 3 - Remove any lingering outdated references"}),"\n",(0,r.jsx)(t.p,{children:"Do a search through your codebase for any remaining references to Xamarin.Forms. There are probably some instances that the Upgrade Assistant didn't handle. For example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"// TODO Xamarin.Forms.Device.RuntimePlatform is no longer supported. Use Microsoft.MAUI.Devices.DeviceInfo.Platform instead. For more details see https://learn.microsoft.com/en-us/dotnet/maui/migration/forms-projects#device-changes\nif (Xamarin.Forms.Device.RuntimePlatform != Xamarin.Forms.Device.UWP)\n{\n    AppManager.Instance.OnActivated();\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"will become:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"if (DeviceInfo.Platform != DevicePlatform.WinUI)\n{\n    AppManager.Instance.OnActivated();\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"(Note the change from UWP to WinUI)."}),"\n",(0,r.jsxs)(t.p,{children:["A few types in Mobile, like the ",(0,r.jsx)(t.code,{children:"EnhancedActivityIndicator"})," and ",(0,r.jsx)(t.code,{children:"EnhancedSwitch"})," which were previously used in our Samples, have been removed as no longer necessary. Instead you should use MAUI's standard controls, in this case ",(0,r.jsx)(t.code,{children:"ActivityIndicator"})," or ",(0,r.jsx)(t.code,{children:"Switch"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"step-4---fix-other-build-errors",children:"Step 4 - Fix other build errors"}),"\n",(0,r.jsx)(t.p,{children:"To fix this problem in your solution:"}),"\n",(0,r.jsx)("img",{src:(0,s.Ay)("img/mobile-sdk-configuration-mapping-error.png")}),"\n",(0,r.jsxs)(t.p,{children:["Open your .sln file in a text editor and delete everything in the ",(0,r.jsx)(t.code,{children:"GlobalSection(ProjectConfigurationPlatforms) = postSolution"})," section. When you re-open the sln file in Visual Studio,\nit will repopulate that section correctly."]}),"\n",(0,r.jsxs)(t.p,{children:["On Windows, the build error ",(0,r.jsx)(t.code,{children:"Type 'App' already defines a member called 'InitializeComponent' with the same parameter types"})," is solved by adding the following lines to the csproj:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:"\x3c!-- We do not want WinUI XAML files to be processed as .NET MAUI XAML --\x3e\n<EnableDefaultXamlItems>false</EnableDefaultXamlItems>\n<EnableDefaultMAUIItems>false</EnableDefaultMAUIItems>\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you find that Visual Studio simply isn't giving you the option to deploy to Windows, you may be missing your launchsettings.json file. Ensure you add such a file under the Properties folder of your Windows project."}),"\n",(0,r.jsx)(t.p,{children:"Those are some specific errors I ran into while converting the Samples project. Continue working through your own project fixing any additional problems you might have, until you are able to build succesfully."}),"\n",(0,r.jsx)(t.h2,{id:"step-5---migrate-code-from-original-files",children:"Step 5 - Migrate code from *.original files"}),"\n",(0,r.jsxs)(t.p,{children:["You may have noticed that in Step 1 the Upgrade Assistant created copies of several platform-specific startup files, suffixed with .original.\nE.g. ",(0,r.jsx)(t.code,{children:"AppDelegate.cs.original"})]}),"\n",(0,r.jsxs)(t.p,{children:["For each of the platforms, compare the .original file to the new version and copy over any logic required. For example, your SDK project would likely have extended ",(0,r.jsx)(t.code,{children:"VertiGISMobileActivity"})," and ",(0,r.jsx)(t.code,{children:"VertiGISAppDelegate"})," for Android and iOS, respectively.\nThe upgrade tool won't have preserved that, so you'll need to do that now."]}),"\n",(0,r.jsx)(t.h2,{id:"step-6---fix-runtime-errors",children:"Step 6 - Fix runtime errors"}),"\n",(0,r.jsx)(t.p,{children:"At this point you should be able to build and run your app, but will likely encounter some runtime errors."}),"\n",(0,r.jsxs)(t.p,{children:["On Android for example, you'll likely have to fix ",(0,r.jsx)(t.code,{children:'[AndroidRuntime] java.lang.RuntimeException: Unable to get provider android.support.v4.content.FileProvider: java.lang.ClassNotFoundException: Didn\'t find class "android.support.v4.content.FileProvider" on path: [...]'}),"\nby making a change in your AndroidManifest.xml."]}),"\n",(0,r.jsx)(t.p,{children:"Change"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<provider android:name="android.support.v4.content.FileProvider" android:authorities="${applicationId}.fileprovider" android:exported="false" android:grantUriPermissions="true">\n'})}),"\n",(0,r.jsx)(t.p,{children:"to"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<provider android:name="androidx.core.content.FileProvider" android:authorities="${applicationId}.fileprovider" android:exported="false" android:grantUriPermissions="true">\n'})}),"\n",(0,r.jsx)(t.p,{children:"And if your Android MainActivity had a custom name, make sure the name is still being set in MainActivity.cs."}),"\n",(0,r.jsxs)(t.p,{children:["On Windows, if you were merging in Mobile's VertiGISResources.xaml file in a merged dictionary, like ",(0,r.jsx)(t.code,{children:'<ResourceDictionary Source="VertiGIS.Mobile.UWP/Resources/VertiGISResources.xaml"/>'}),", you'll now need to update the path: ",(0,r.jsx)(t.code,{children:'<ResourceDictionary Source="VertiGIS.Mobile/Platforms/Windows/VertiGISResources.xaml"/>'}),".\n",(0,r.jsx)(t.code,{children:"VertiGIS.Mobile.Toolkit.UWP/Resources/ToolkitResources.xaml"})," no longer exists as a separate file."]}),"\n",(0,r.jsx)(t.h2,{id:"step-7---update-outdated-controls",children:"Step 7 - Update outdated controls"}),"\n",(0,r.jsxs)(t.p,{children:["Once you've got all the build and runtime errors sorted out, I strongly recommend updating certain MAUI controls to their new and improved counterparts.\nThis article, ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/migration/layouts?view=net-maui-9.0",children:'"Layout behavior changes from Xamarin.Forms"'}),", has some useful information about this."]}),"\n",(0,r.jsxs)(t.p,{children:["In particular, all ",(0,r.jsx)(t.code,{children:"Frame"})," controls should be replaced with ",(0,r.jsx)(t.code,{children:"Border"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"StackLayout"})," should be replaced by ",(0,r.jsx)(t.code,{children:"VerticalStackLayout"})," or ",(0,r.jsx)(t.code,{children:"HorizontalStackLayout"}),", or by ",(0,r.jsx)(t.code,{children:"Grid"}),", depending on your use case.\nFor the layout options, ",(0,r.jsx)(t.code,{children:"*AndExpand"})," is no longer supported in MAUI, so any instances of ",(0,r.jsx)(t.code,{children:"StartAndExpand"})," or ",(0,r.jsx)(t.code,{children:"CenterAndExpand"})," for example should now be replaced by just ",(0,r.jsx)(t.code,{children:"Start"})," or ",(0,r.jsx)(t.code,{children:"Center"}),".\nThe article I mentioned above explains ",(0,r.jsxs)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/maui/migration/layouts?view=net-maui-9.0#stacklayout",children:["how to replace a ",(0,r.jsx)(t.code,{children:"StackLayout"})]})," to preserve the previous expanding behaviour."]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var i=o(6540);const r={},n=i.createContext(r);function s(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(n.Provider,{value:t},e.children)}},964:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/02/13/mobile-sdk-maui-conversion","source":"@site/blog/2025-02-13-mobile-sdk-maui-conversion.mdx","title":"Converting a VertiGIS Studio Mobile SDK project to .NET MAUI","description":"As of our 5.30 release, VertiGIS Studio Mobile has been migrated from Xamarin Forms to .NET MAUI, on .NET 8. We\'ve now completed work to support MAUI in our nuget package as well, so the time has come for any Xamarin Forms projects using our SDK to do their own migration.","date":"2025-02-13T00:00:00.000Z","tags":[{"inline":true,"label":"mobile","permalink":"/blog/tags/mobile"},{"inline":true,"label":"maui","permalink":"/blog/tags/maui"},{"inline":true,"label":"sdk","permalink":"/blog/tags/sdk"},{"inline":true,"label":"samples","permalink":"/blog/tags/samples"}],"readingTime":6.53,"hasTruncateMarker":true,"authors":[{"name":"Felicity Rhone","title":"Software Developer","url":"https://github.com/Felicity-R","imageURL":"https://github.com/felicity-r.png","key":null,"page":null}],"frontMatter":{"title":"Converting a VertiGIS Studio Mobile SDK project to .NET MAUI","author":"Felicity Rhone","authorTitle":"Software Developer","authorURL":"https://github.com/Felicity-R","authorImageURL":"https://github.com/felicity-r.png","tags":["mobile","maui","sdk","samples"]},"unlisted":false,"prevItem":{"title":"Override Search Area in VertiGIS Studio Mobile","permalink":"/blog/2025/05/02/mobile-override-search-area"},"nextItem":{"title":"VertiGIS Mobile Now Supports ArcGIS Maps SDK 200.x","permalink":"/blog/2024/08/22/mobile-maui-announcement"}}')}}]);