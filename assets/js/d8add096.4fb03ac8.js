"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[5693],{8771:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=o(6085),r=o(4848),n=o(8453),a=(o(8774),o(6025));const s={title:"Override Search Area in VertiGIS Studio Mobile",author:"Jack Basha",authorTitle:"Quality Assurance Analyst",authorURL:"https://github.com/jackbasha",authorImageURL:"https://github.com/jackbasha.png",tags:["mobile","search"]},l=void 0,h={authorsImageUrls:[void 0]},c=[{value:"1 - Creating the Search Override Workflow",id:"creating-search-override-workflow",level:2},{value:"2 - Finding the Area to Override Search",id:"2---finding-the-area-to-override-search",level:2},{value:"2.1 - Using a layer&#39;s FullExtent property to obtain the extent",id:"using-layer-bounds",level:3},{value:"2.2 - Using custom bounds to obtain the extent",id:"using-custom-bounds",level:3},{value:"3 - Finishing the Workflow",id:"finishing-workflow",level:2},{value:"4 - Updating the Mobile app JSON and overriding the Search functionality",id:"4---updating-the-mobile-app-json-and-overriding-the-search-functionality",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"VertiGIS Studio Mobile enables app developers to override the default search area, which is the current visible area of the map when the app is not backed by an MMPK, to a custom area (extent) of the developer's choosing. This requires hand-editing the app JSON and working out a few details. In this blog post, I will guide you on how to do that and how to define a custom extent for search to operate within."}),"\n",(0,r.jsx)(t.h2,{id:"creating-search-override-workflow",children:"1 - Creating the Search Override Workflow"}),"\n",(0,r.jsxs)(t.p,{children:["To start off the work, we'll need to head to VertiGIS Studio Workflow and create a new blank Workflow. Call it ",(0,r.jsx)(t.code,{children:"Search Override"}),". This Workflow will be used to override the search functionality in Mobile."]}),"\n",(0,r.jsxs)(t.p,{children:["To create the Workflow, you may either download and import this ",(0,r.jsx)("a",{href:(0,a.Ay)("workflows/mobile-search-override-skeleton.json"),download:"search-override-skeleton.json",target:"\\_blank",children:"skeleton file"})," in Workflow Designer, or create and configure it yourself in the following way:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"Get Workflow Inputs"})," activity with ID ",(0,r.jsx)(t.code,{children:"getWorkflowInputs1"})]}),"\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"Set Property"})," activity, which we'll leave empty for now."]}),"\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"Run Command"})," activity; configure the parameters as follows:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Command Name"}),": ",(0,r.jsx)(t.code,{children:'="tasks.search,results.display"'})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Command Parameter"}),": ",(0,r.jsx)(t.code,{children:"=$getWorkflowInputs1.inputs.context"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"We will be using this Workflow to override the default search behaviour in Mobile so that we change the search area prior to performing the search."}),"\n",(0,r.jsx)(t.h2,{id:"2---finding-the-area-to-override-search",children:"2 - Finding the Area to Override Search"}),"\n",(0,r.jsx)(t.p,{children:"There are two ways of obtaining the extent numbers needed to override the search area: Using a layer's FullExtent property to obtain the extent, or using a geometry picker to create a custom search area."}),"\n",(0,r.jsx)(t.p,{children:"I will walk you through how to use both of these methods to enable the most amount of customization and to fit your use case."}),"\n",(0,r.jsx)(t.h3,{id:"using-layer-bounds",children:"2.1 - Using a layer's FullExtent property to obtain the extent"}),"\n",(0,r.jsx)(t.p,{children:"Using a layer to obtain the extent numbers is the more foolproof way since it doesn't involve hard-coding any specific numbers to Workflow."}),"\n",(0,r.jsx)(t.admonition,{title:"Note",type:"info",children:(0,r.jsxs)(t.p,{children:["This is the ",(0,r.jsx)(t.em,{children:"recommended"})," way, as obtaining custom extent numbers is a more complicated process. However, while testing, I found this to cover a much larger area than what's actually covered by the features of the layer so, although this works to extend the search area, developers who want a finer control of the search area override should use the method described in ",(0,r.jsx)(t.a,{href:"#using-custom-bounds",children:"section 2.2"}),"."]})}),"\n",(0,r.jsxs)(t.p,{children:["On the ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow, add a ",(0,r.jsx)(t.code,{children:"Get Layer"})," activity to obtain a layer that will act as the basis of the search area. Add this activity ",(0,r.jsx)(t.strong,{children:"to the start"})," of the Workflow. Assuming the ",(0,r.jsx)(t.code,{children:"Get Layer"})," activity's ID is ",(0,r.jsx)(t.code,{children:"layer1"}),", we will be using ",(0,r.jsx)(t.code,{children:"=$layer1.layer.Unwrap().FullExtent"})," as input to the ",(0,r.jsx)(t.code,{children:"Set Property"})," activity; the ",(0,r.jsx)(t.a,{href:"#finishing-workflow",children:"next section"})," will point out how to fill the activity properly. ",(0,r.jsx)(t.code,{children:"layer.unwrap()"})," is an undocumented function which unwraps a layer from what we use internally in VertiGIS Studio products into ",(0,r.jsx)(t.a,{href:"https://developers.arcgis.com/net/api-reference/api/netwin/Esri.ArcGISRuntime/Esri.ArcGISRuntime.Mapping.FeatureLayer.html",children:"ESRI's layer objects"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"using-custom-bounds",children:"2.2 - Using custom bounds to obtain the extent"}),"\n",(0,r.jsxs)(t.p,{children:["Creating a custom search area requires a bit more work to obtain the required search extent numbers. To start off, you may either download and import this ",(0,r.jsx)("a",{href:(0,a.Ay)("workflows/mobile-geometry-via-geometry-picker.json"),download:"geometry-via-geometry-picker.json",target:"\\_blank",children:"skeleton file"})," in Workflow Designer, or you can create it yourself."]}),"\n",(0,r.jsxs)(t.p,{children:["If you wish to create the Workflow yourself: Create a new blank Workflow, call it something along the lines of ",(0,r.jsx)(t.code,{children:"Get Geometry from Geometry Picker"}),". We will be using this Workflow to obtain the extent values from a geometry picker which will be used to define our search area. Follow these steps to configure the Workflow:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"Display Form"})," activity, with ID ",(0,r.jsx)(t.code,{children:"form1"}),", and add a geometry picker in there. Make sure that the geometry type is set to ",(0,r.jsx)(t.code,{children:"Polygon"}),"\n",(0,r.jsx)("img",{src:(0,a.Ay)("img/mobile-set-geometry-picker-type.png")}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Add a ",(0,r.jsx)(t.code,{children:"Convert To JSON"})," next and use ",(0,r.jsx)(t.code,{children:"=$form1.state.geometryPicker1.value.geometry[0]"})," as the inputs to the ",(0,r.jsx)(t.code,{children:"Object"})," parameter"]}),"\n",(0,r.jsxs)(t.li,{children:["Use another ",(0,r.jsx)(t.code,{children:"Display Form"})," activity to display these results in a way that is easily copyable. Add a ",(0,r.jsx)(t.code,{children:"Text Area"})," form element and a load event on the form's title that replaces the text area's value with the output from the ",(0,r.jsx)(t.code,{children:"Convert To JSON"})," activity","\n",(0,r.jsx)("img",{src:(0,a.Ay)("img/mobile-set-text-area-with-json.png")}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The output should look something like the following but unformatted; you may format it for readability. Ensure sure the first point matches the last point and that these two are the only identical points."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n    "rings": [\n        [\n            [-13261447.128629405, 4248956.0934711397],\n            [-13255720.535082744, 3797373.288077388],\n            [-12575073.987822598, 3791646.6945307283],\n            [-12581618.666161638, 4253046.5174330398],\n            [-13261447.128629405, 4248956.0934711397]\n        ]\n    ],\n    "spatialReference": { "wkid": 102100, "latestWkid": 3857 }\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{title:"Warning",type:"danger",children:(0,r.jsx)(t.p,{children:"Make sure to copy the spatial reference info as the extent numbers are meaningless without them."})}),"\n",(0,r.jsxs)(t.p,{children:["After obtaining the JSON of the search area, add a ",(0,r.jsx)(t.code,{children:"Get Geometry From JSON"})," activity to the ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow, and use the JSON as input to the ",(0,r.jsx)(t.code,{children:"Json"})," parameter for the ",(0,r.jsx)(t.code,{children:"Get Geometry From JSON"})," activity you just added. Assuming the mentioned ",(0,r.jsx)(t.code,{children:"Get Geometry From JSON"})," activity's ID is ",(0,r.jsx)(t.code,{children:"geometry1"}),", we will be using ",(0,r.jsx)(t.code,{children:"=$geometry1.geometry.Polygon"})," as input to the ",(0,r.jsx)(t.code,{children:"Set Property"})," activity. The ",(0,r.jsx)(t.a,{href:"#finishing-workflow",children:"next section"})," will point out how to fill the activity properly."]}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsxs)(t.p,{children:["You may include this ",(0,r.jsx)(t.code,{children:"Get Geometry from Geometry Picker"})," Workflow in the main ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow, instead of copying the values over, to allow a higher degree of customizability during run-time; however, that will require using the geometry picker to set create the bounds polygon every time a search is commenced."]}),(0,r.jsxs)(t.p,{children:["You may either do so by using it as a separate sub-Workflow, or copy all the activities to the start of the ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow. You will need to adjust the input of the ",(0,r.jsx)(t.code,{children:"Get Geometry From JSON"})," activity accordingly."]})]}),"\n",(0,r.jsx)(t.h2,{id:"finishing-workflow",children:"3 - Finishing the Workflow"}),"\n",(0,r.jsxs)(t.p,{children:["After finding the search area's geometry, the process is the same no matter which method of obtaining the search area you chose. After you've performed the required setup as described in ",(0,r.jsx)(t.a,{href:"#using-layer-bounds",children:"section 2.1"})," or ",(0,r.jsx)(t.a,{href:"#using-custom-bounds",children:"section 2.2"}),", head to the ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow. There, we will populate the ",(0,r.jsx)(t.code,{children:"Set Property"})," activity we've added in ",(0,r.jsx)(t.a,{href:"#creating-search-override-workflow",children:"section 1"}),". This activity is where we will replace the search area with the one we customized. Set up the activity as follows:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Object"}),": Use ",(0,r.jsx)(t.code,{children:"=$getWorkflowInputs1.inputs.context"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Property Name"}),": Use ",(0,r.jsx)(t.code,{children:'="SearchArea"'})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Property Value"}),":","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"=$layer1.layer.Unwrap().FullExtent"})," if you've followed ",(0,r.jsx)(t.a,{href:"#using-layer-bounds",children:"section 2.1"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"=$geometry1.geometry.Polygon"})," if you've followed ",(0,r.jsx)(t.a,{href:"#using-custom-bounds",children:"section 2.2"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsxs)(t.p,{children:["You may optionally add a graphical representation of the search area on the map. This might be helpful to visualize the search area and verify the work you've done. You can do so by adding a ",(0,r.jsx)(t.code,{children:"Get Symbol From JSON"})," activity and populate its ",(0,r.jsx)(t.code,{children:"Json"})," input as follows:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'={\n  "type": "esriSFS",\n  "style": "esriSFSSolid",\n  "color": [34,237,24,150],\n    "outline": {\n    "type": "esriSLS",\n    "style": "esriSLSSolid",\n    "color": [110,110,110,150],\n    "width": 1\n  }\n}\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["You may change the opacity value, the last number in the ",(0,r.jsx)(t.code,{children:"color"})," parameter, to a lower value for better visualization."]})}),(0,r.jsxs)(t.p,{children:["Then, add a ",(0,r.jsx)(t.code,{children:"Create Feature"})," activity and fill out the inputs as follows:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Geometry"}),": Use the same value you used to fill ",(0,r.jsx)(t.code,{children:"Property Value"})," input in the ",(0,r.jsx)(t.code,{children:"Set Property"})," activity."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Symbol"}),": Use the symbol created in the ",(0,r.jsx)(t.code,{children:"Get Symbol From JSON"})," activity."]}),"\n"]})]}),"\n",(0,r.jsx)(t.h2,{id:"4---updating-the-mobile-app-json-and-overriding-the-search-functionality",children:"4 - Updating the Mobile app JSON and overriding the Search functionality"}),"\n",(0,r.jsxs)(t.p,{children:["To use this Workflow we've created in Mobile, launch the SuDo editor in Designer using ",(0,r.jsx)(t.code,{children:"Ctrl+Shift+E"})," and scroll to the bottom. There, add a new entry to reference the ",(0,r.jsx)(t.code,{children:"Search Override"})," Workflow we created earlier. You may use the following template and replace ",(0,r.jsx)(t.code,{children:"portalItem"})," with your Workflow's ArcGIS portal link:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n    "id": "search-override-workflow",\n    "title": "Search Override Workflow",\n    "target": "auto",\n    "portalItem": "<Replace me>",\n    "commandArgumentInput": "context",\n    "$type": "workflow"\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"When done correctly, the app JSON should look like the following:"}),"\n",(0,r.jsx)("img",{src:(0,a.Ay)("img/mobile-adding-workflow-via-sudo-editor.png")}),"\n",(0,r.jsxs)(t.p,{children:["Lastly, look up the search object in Designer, which you can find by searching (",(0,r.jsx)(t.code,{children:"Ctrl+F"}),") for ",(0,r.jsx)(t.code,{children:'"$type": "search"'}),". Change it from"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n    "id": "search-config-1",\n    "$type": "search"\n},\n'})}),"\n",(0,r.jsx)(t.p,{children:"To"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n    "id": "search-config-1",\n    "onSearch": "workflow.run-XXXX-XXX-XX-XXXXX-XXXXXX",\n    "$type": "search"\n},\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Where you replace the ",(0,r.jsx)(t.code,{children:"XXX..."})," with the value of the ",(0,r.jsx)(t.code,{children:"id"})," field you typed in the previous step. So it looks like the following:"]}),"\n",(0,r.jsx)("img",{src:(0,a.Ay)("img/mobile-overriding-search-using-workflow.png")}),"\n",(0,r.jsxs)(t.p,{children:["After that is done, click on the ",(0,r.jsx)(t.code,{children:"Apply, I know what I'm doing"})," button and wait for Designer to load, then save the app. Launch the app in Go and attempt to search for a feature that doesn't exist in the visible extent. If you've done everything correctly, the search should go through with the configured extent."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var i=o(6540);const r={},n=i.createContext(r);function a(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},6085:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/05/02/mobile-override-search-area","source":"@site/blog/2025-05-02-mobile-override-search-area.mdx","title":"Override Search Area in VertiGIS Studio Mobile","description":"VertiGIS Studio Mobile enables app developers to override the default search area, which is the current visible area of the map when the app is not backed by an MMPK, to a custom area (extent) of the developer\'s choosing. This requires hand-editing the app JSON and working out a few details. In this blog post, I will guide you on how to do that and how to define a custom extent for search to operate within.","date":"2025-05-02T00:00:00.000Z","tags":[{"inline":true,"label":"mobile","permalink":"/blog/tags/mobile"},{"inline":true,"label":"search","permalink":"/blog/tags/search"}],"readingTime":7.38,"hasTruncateMarker":true,"authors":[{"name":"Jack Basha","title":"Quality Assurance Analyst","url":"https://github.com/jackbasha","imageURL":"https://github.com/jackbasha.png","key":null,"page":null}],"frontMatter":{"title":"Override Search Area in VertiGIS Studio Mobile","author":"Jack Basha","authorTitle":"Quality Assurance Analyst","authorURL":"https://github.com/jackbasha","authorImageURL":"https://github.com/jackbasha.png","tags":["mobile","search"]},"unlisted":false,"prevItem":{"title":"Using AI Image Recognition with the VertiGIS Studio Mobile SDK","permalink":"/blog/2025/06/04/mobile-sdk-ai-image-recognition"},"nextItem":{"title":"Converting a VertiGIS Studio Mobile SDK project to .NET MAUI","permalink":"/blog/2025/02/13/mobile-sdk-maui-conversion"}}')}}]);