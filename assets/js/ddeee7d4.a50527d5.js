"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[284,3988],{4676:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>n,metadata:()=>s,toc:()=>d});var r=i(7624),o=i(2172);const n={},a=void 0,s={id:"workflow/snippets/prereqs-web",title:"prereqs-web",description:"Follow the instructions in the Web Applications SDK page to set up your development environment.",source:"@site/docs/workflow/snippets/prereqs-web.mdx",sourceDirName:"workflow/snippets",slug:"/workflow/snippets/prereqs-web",permalink:"/docs/workflow/snippets/prereqs-web",draft:!1,unlisted:!1,editUrl:"https://github.com/vertigis/studio-dev-center/edit/master/docs/workflow/snippets/prereqs-web.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={a:"a",admonition:"admonition",p:"p",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Follow the instructions in the ",(0,r.jsx)(t.a,{href:"/docs/workflow/sdk-web-overview",children:"Web Applications SDK"})," page to set up your development environment."]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["A working knowledge of ",(0,r.jsx)(t.a,{href:"https://www.typescriptlang.org/",children:"TypeScript"})," is recommended before extending Workflow for web-based hosts."]})})]})}function p(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},2388:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var r=i(7624),o=i(2172),n=i(4676),a=i(964);const s={title:"Add a Layer to a Map with an Activity",description:"VertiGIS Studio Workflow - Learn how to access and mutate the application map"},c=void 0,d={id:"workflow/tutorial-web-add-layer-to-map",title:"Add a Layer to a Map with an Activity",description:"VertiGIS Studio Workflow - Learn how to access and mutate the application map",source:"@site/docs/workflow/tutorial-web-add-layer-to-map.mdx",sourceDirName:"workflow",slug:"/workflow/tutorial-web-add-layer-to-map",permalink:"/docs/workflow/tutorial-web-add-layer-to-map",draft:!1,unlisted:!1,editUrl:"https://github.com/vertigis/studio-dev-center/edit/master/docs/workflow/tutorial-web-add-layer-to-map.mdx",tags:[],version:"current",frontMatter:{title:"Add a Layer to a Map with an Activity",description:"VertiGIS Studio Workflow - Learn how to access and mutate the application map"},sidebar:"workflow",previous:{title:"Implement an Activity that Calculates a Logarithm",permalink:"/docs/workflow/tutorial-web-calculate-logarithm-activity"},next:{title:"Implement an activity that creates a QR Code image using a Third Party Library",permalink:"/docs/workflow/tutorial-web-qr-code-activity"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},...n.toc,{value:"Setup the Activity",id:"setup-the-activity",level:2},{value:"Modify the Activity to Access App Properties",id:"modify-the-activity-to-access-app-properties",level:2},{value:"Use the MapProvider to get the map",id:"use-the-mapprovider-to-get-the-map",level:2},{value:"Add a New Map Layer with the Activity",id:"add-a-new-map-layer-with-the-activity",level:2},{value:"Deploy the Activity",id:"deploy-the-activity",level:2},{value:"Test the Activity",id:"test-the-activity",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Some activities may need access to resources like the map. The ",(0,r.jsx)(t.code,{children:"@activate(MapProvider)"})," pattern can be used to get the current map during the execution of your activity."]}),"\n",(0,r.jsx)(t.p,{children:"This article will walk you through creating a custom activity that adds a new layer to the map."}),"\n",(0,r.jsx)("img",{src:(0,a.c)("img/workflow-web-add-layer.png")}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.default,{}),"\n",(0,r.jsx)(t.h2,{id:"setup-the-activity",children:"Setup the Activity"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Open up a terminal shell in the SDK folder."}),"\n",(0,r.jsxs)(t.li,{children:["Run the command ",(0,r.jsx)(t.code,{children:"npm run generate"})," and create a new activity ",(0,r.jsx)(t.code,{children:"AddLayerToMap"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"modify-the-activity-to-access-app-properties",children:"Modify the Activity to Access App Properties"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Add imports for ",(0,r.jsx)(t.code,{children:"MapProvider"}),", ",(0,r.jsx)(t.code,{children:"activate"}),", and ",(0,r.jsx)(t.code,{children:"IActivityContext"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Add the ",(0,r.jsx)(t.code,{children:"@activate(MapProvider)"})," decorator to the ",(0,r.jsx)(t.code,{children:"execute"})," method."]}),"\n",(0,r.jsxs)(t.li,{children:["Modify the ",(0,r.jsx)(t.code,{children:"execute"})," method to mark it as ",(0,r.jsx)(t.code,{children:"async"})," and return a ",(0,r.jsx)(t.code,{children:"Promise"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Modify the ",(0,r.jsx)(t.code,{children:"execute"})," method to include the ",(0,r.jsx)(t.code,{children:"context"})," and ",(0,r.jsx)(t.code,{children:"type"})," parameters."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/activities/AddLayerToMap.ts"',children:'import type { IActivityHandler } from "@vertigis/workflow";\n// highlight-start\nimport { MapProvider } from "@vertigis/workflow/activities/arcgis/MapProvider";\nimport { activate } from "@vertigis/workflow/Hooks";\nimport type { IActivityContext } from "@vertigis/workflow/IActivityHandler";\n// highlight-end\n\n/**\n * @supportedApps GWV\n * @category Custom Activities\n * @description An activity which adds a graphics layer to a map.\n */\n// highlight-next-line\n@activate(MapProvider)\nexport class AddLayerToMap implements IActivityHandler {\n    /** Perform the execution logic of the activity. */\n    // highlight-start\n    async execute(\n        inputs: object,\n        context: IActivityContext,\n        type: typeof MapProvider\n    ): Promise<void> {\n        // highlight-end\n        return;\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"use-the-mapprovider-to-get-the-map",children:"Use the MapProvider to get the map"}),"\n",(0,r.jsxs)(t.p,{children:["Next, we create the ",(0,r.jsx)(t.code,{children:"MapProvider"}),", load it asynchronously, and use it to get the map."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/activities/AddLayerToMap.ts"',children:'import type { IActivityHandler } from "@vertigis/workflow";\nimport { MapProvider } from "@vertigis/workflow/activities/arcgis/MapProvider";\nimport { activate } from "@vertigis/workflow/Hooks";\nimport type { IActivityContext } from "@vertigis/workflow/IActivityHandler";\n\n/**\n * @supportedApps GWV\n * @category Custom Activities\n * @description An activity which adds a graphics layer to a map.\n */\n@activate(MapProvider)\nexport class AddLayerToMap implements IActivityHandler {\n    /** Perform the execution logic of the activity. */\n    async execute(\n        inputs: object,\n        context: IActivityContext,\n        type: typeof MapProvider\n    ): Promise<void> {\n        // highlight-start\n        const mapProvider = type.create();\n        await mapProvider.load();\n\n        const map = mapProvider.map;\n        if (!map) {\n            throw new Error("map is required");\n        }\n        // highlight-end\n\n        return;\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"add-a-new-map-layer-with-the-activity",children:"Add a New Map Layer with the Activity"}),"\n",(0,r.jsxs)(t.p,{children:["Next, we use the ",(0,r.jsx)(t.a,{href:"/docs/workflow/sdk-web-integrating-the-arcgis-api",children:"ArcGIS API for JavaScript"})," to create a graphics layer and add it to the map."]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["This activity assumes that it will be running in VertiGIS Studio Web, and so ",(0,r.jsx)(t.a,{href:"/docs/workflow/sdk-web-integrating-the-arcgis-api#add-arcgis-api-for-javascript-typings",children:"it uses the 4.x ArcGIS API for JavaScript"}),"."]})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/activities/AddLayerToMap.ts"',children:'import type { IActivityHandler } from "@vertigis/workflow";\nimport { MapProvider } from "@vertigis/workflow/activities/arcgis/MapProvider";\nimport { activate } from "@vertigis/workflow/Hooks";\nimport type { IActivityContext } from "@vertigis/workflow/IActivityHandler";\n// highlight-start\nimport * as Graphic from "esri/Graphic";\nimport * as GraphicsLayer from "esri/layers/GraphicsLayer";\nimport * as Polyline from "esri/geometry/Polyline";\nimport * as LineSymbol from "esri/symbols/LineSymbol";\n// highlight-end\n\n/**\n * @supportedApps GWV\n * @category Custom Activities\n * @description An activity which adds a graphics layer to a map.\n */\n@activate(MapProvider)\nexport class AddLayerToMap implements IActivityHandler {\n    /** Perform the execution logic of the activity. */\n    async execute(\n        inputs: object,\n        context: IActivityContext,\n        type: typeof MapProvider\n    ): Promise<void> {\n        const mapProvider = type.create();\n        await mapProvider.load();\n\n        const map = mapProvider.map;\n        if (!map) {\n            throw new Error("map is required");\n        }\n\n        // highlight-start\n        var polylineGraphic = new Graphic({\n            geometry: new Polyline({\n                paths: [\n                    [\n                        [-111.3, 52.68],\n                        [-98, 49.5],\n                        [-93.94, 29.89],\n                    ],\n                ],\n            }),\n            symbol: new LineSymbol({\n                color: [226, 119, 40],\n                width: 4,\n            }),\n        });\n\n        var graphicsLayer = new GraphicsLayer({\n            graphics: [polylineGraphic],\n        });\n\n        map.add(graphicsLayer);\n        // highlight-end\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"deploy-the-activity",children:"Deploy the Activity"}),"\n",(0,r.jsxs)(t.p,{children:["Follow the instructions to ",(0,r.jsx)(t.a,{href:"/docs/workflow/sdk-web-overview#deployment",children:"build and deploy the activity pack"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"test-the-activity",children:"Test the Activity"}),"\n",(0,r.jsx)(t.p,{children:"Once your activity pack is hosted and registered, your custom activity should appear in the activity toolbox in VertiGIS Studio Workflow Designer alongside the built-in activities, and can be used in the graphical interface like any other activity."}),"\n",(0,r.jsx)(t.p,{children:"Now you can build a workflow that uses your new custom activity!"}),"\n",(0,r.jsx)("img",{src:(0,a.c)("img/workflow-web-add-layer.png")})]})}function m(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},2172:(e,t,i)=>{i.d(t,{I:()=>s,M:()=>a});var r=i(1504);const o={},n=r.createContext(o);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);