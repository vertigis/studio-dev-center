"use strict";(globalThis.webpackChunkvertigis_studio_dev_center=globalThis.webpackChunkvertigis_studio_dev_center||[]).push([[7607],{8636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=n(4848),s=n(8453),o=n(6025);const a={title:"Layout Reference",description:"VertiGIS Studio Web - Learn about the core layout components"},l=void 0,c={id:"web/configuration-layout-reference",title:"Layout Reference",description:"VertiGIS Studio Web - Learn about the core layout components",source:"@site/docs/web/configuration-layout-reference.mdx",sourceDirName:"web",slug:"/web/configuration-layout-reference",permalink:"/docs/web/configuration-layout-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/vertigis/studio-dev-center/edit/master/docs/web/configuration-layout-reference.mdx",tags:[],version:"current",frontMatter:{title:"Layout Reference",description:"VertiGIS Studio Web - Learn about the core layout components"},sidebar:"web",previous:{title:"Getting Started",permalink:"/docs/web/configuration-layout-getting-started"},next:{title:"Advanced Model Binding",permalink:"/docs/web/configuration-advanced-model-binding"}},r={},d=[{value:"Basic Attributes",id:"basic-attributes",level:2},{value:"<code>id</code>",id:"id",level:3},{value:"<code>config</code>",id:"config",level:3},{value:"<code>active</code>",id:"active",level:3},{value:"<code>models</code>",id:"models",level:3},{value:"Core Layout Components",id:"core-layout-components",level:2},{value:"Stacks and Splits",id:"stacks-and-splits",level:3},{value:"Panels",id:"panels",level:3},{value:"Activation",id:"activation",level:4},{value:"Deactivation",id:"deactivation",level:4},{value:"Presentation Attributes",id:"presentation-attributes",level:2},{value:"<code>margin</code>",id:"margin",level:3},{value:"<code>padding</code>",id:"padding",level:3},{value:"<code>width</code>",id:"width",level:3},{value:"<code>height</code>",id:"height",level:3},{value:"<code>grow</code>",id:"grow",level:3},{value:"<code>halign</code> (Horizontal Align)",id:"halign-horizontal-align",level:3},{value:"<code>valign</code> (Vertical Align)",id:"valign-vertical-align",level:3},{value:"Alignments Effect on cross-axis stretching",id:"alignments-effect-on-cross-axis-stretching",level:3}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"basic-attributes",children:"Basic Attributes"}),"\n",(0,i.jsxs)(t.p,{children:["This is a reference for the attributes available to all components in an ",(0,i.jsx)(t.a,{href:"/docs/web/configuration-layout-getting-started",children:"app layout"}),". Some of these attributes are accessible through the ",(0,i.jsx)(t.a,{href:"https://apps.vertigisstudio.com/web/designer/",children:"VertiGIS Studio Web Designer"}),", and the rest must be configured through layout."]}),"\n",(0,i.jsx)(t.p,{children:"All attributes are specified as string values, and parsed into their respective types by VertiGIS Studio Web"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'\x3c!-- string attribute --\x3e\n<stack id="some-id"/>\n\x3c!-- number attribute --\x3e\n<stack margin="3"/>\n\x3c!-- boolean attribute --\x3e\n<stack active="false"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"id",children:(0,i.jsx)(t.code,{children:"id"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"string"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Used to uniquely identify the component in the layout."]}),"\n",(0,i.jsx)(t.h3,{id:"config",children:(0,i.jsx)(t.code,{children:"config"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"string"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Used to bind a component to an item in the app config. See ",(0,i.jsx)(t.a,{href:"/docs/web/configuration-app-config-getting-started#linking-layout-to-app-config",children:"linking layout app config"})," for more details."]}),"\n",(0,i.jsx)(t.h3,{id:"active",children:(0,i.jsx)(t.code,{children:"active"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"boolean"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Used to mark a component as initially active and visible. \\"]}),"\n",(0,i.jsx)(t.h3,{id:"models",children:(0,i.jsx)(t.code,{children:"models"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"string"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": A css selector string specifying the component with the model that needs to be resolved. See ",(0,i.jsx)(t.a,{href:"/docs/web/configuration-advanced-model-binding#the-models-attribute",children:"models"})," for details."]}),"\n",(0,i.jsx)(t.h2,{id:"core-layout-components",children:"Core Layout Components"}),"\n",(0,i.jsx)(t.p,{children:"The following is a reference for the main components used for visual organization in the layout."}),"\n",(0,i.jsxs)(t.p,{children:["All the components discussed in this section article live in the ",(0,i.jsx)(t.code,{children:"https://geocortex.com/layout/v1"})," namespace."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<layout xmlns="https://geocortex.com/layout/v1">\n    <map/>\n</layout>\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["All of these components are available for use in the ",(0,i.jsx)(t.a,{href:"https://apps.vertigisstudio.com/web/designer/",children:"VertiGIS Studio Web\nDesigner"}),"."]})}),"\n",(0,i.jsx)(t.h3,{id:"stacks-and-splits",children:"Stacks and Splits"}),"\n",(0,i.jsx)(t.p,{children:"Stacks and splits are used to partition the viewer into rectangular sectors, each filled with whichever components you desire."}),"\n",(0,i.jsx)(t.p,{children:"The best way to think of stacks is that every item within them is being ordered top to bottom:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<stack>\n    <text text="item1"/>\n    <text text="item2"/>\n    <text text="item3"/>\n</stack>\n'})}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-1.png")}),"\n",(0,i.jsx)(t.p,{children:"The best way to think of splits is that every item within them is being ordered left to right:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<split>\n    <text text="item1"/>\n    <text text="item2"/>\n    <text text="item3"/>\n</split>\n'})}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-2.png")}),"\n",(0,i.jsx)(t.p,{children:"When creating complex layouts with embedded stacks and splits, it's good to picture building it from the inside out:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<stack>\n    <split>\n        <text text="item1"/>\n        <stack>\n            <text text="item2"/>\n            <text text="item3"/>\n        </stack>\n    </split>\n    <split>\n        <text text="item4"/>\n        <text text="item5"/>\n        <text text="item6"/>\n    </split>\n</stack>\n'})}),"\n",(0,i.jsx)(t.p,{children:"We start by building the first inner-most stack:"}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-4.png")}),"\n",(0,i.jsx)(t.p,{children:"Then slot that into the split one level up:"}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-5.png")}),"\n",(0,i.jsx)(t.p,{children:"We then build the next split:"}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-6.png")}),"\n",(0,i.jsx)(t.p,{children:"And finally slot those two splits into the outer-most stack:"}),"\n",(0,i.jsx)("img",{className:"stackSplitImage",src:(0,o.A)("img/stack-split-3.png")}),"\n",(0,i.jsx)(t.h3,{id:"panels",children:"Panels"}),"\n",(0,i.jsx)(t.p,{children:"Panels are a container component that enable hierarchal navigation between different components."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<layout xmlns="https://geocortex.com/layout/v1">\n    <split resizable="true">\n        <panel width="26">\n            <stack>\n                <search/>\n                <results-list/>\n            </stack>\n            <feature-details/>\n        </panel>\n        <map/>\n    </split>\n</layout>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["For a deeper dive into Panels, ",(0,i.jsx)(t.a,{href:"/docs/web/configuration-layout-reference#panels",children:"check out the api reference"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["When you first open the panel, the first component in the panel is activated. In this example, it's the ",(0,i.jsx)(t.code,{children:"<stack>"})," component containing a ",(0,i.jsx)(t.code,{children:"<search>"})," and ",(0,i.jsx)(t.code,{children:"<results-list>"}),".\nWhen a feature in the results list is opened, the ",(0,i.jsx)(t.code,{children:"<feature-details>"})," component will be activated. At this point, the panel takes over the activation of the component. It will display the new component overtop of the existing visible component, and provide a back button to navigate to the previous component. The activation and deactivation algorithms for a panel rely on the concept of a stacking order of components laid on top of each other, with the first component being the bottommost, and the last being the topmost. In the example above, the ",(0,i.jsx)(t.code,{children:"<stack>"})," containing ",(0,i.jsx)(t.code,{children:"<search>"})," is the lowest, while the ",(0,i.jsx)(t.code,{children:"<feature-details>"})," is the topmost."]}),"\n",(0,i.jsx)(t.h4,{id:"activation",children:"Activation"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If the target component exists in the panel, then deactivate components above it until the target component is active","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Else, the target component must be deactivated, so activate it and place it above the existing component."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"deactivation",children:"Deactivation"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If the component is the topmost element (it is active), then deactivate it.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Else, the component is already inactive"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"presentation-attributes",children:"Presentation Attributes"}),"\n",(0,i.jsxs)(t.p,{children:["Components support a number of presentation attributes to adjust their positioning and styling in the application after slotting. Some of these presentation attributes are accessible through the ",(0,i.jsx)(t.a,{href:"https://apps.vertigisstudio.com/web/designer/",children:"VertiGIS Studio Web Designer"}),", and the rest can be configured through layout."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"All dimensional units are expressed in 'em's, where 1 em is equal to the current font size."})}),"\n",(0,i.jsx)(t.h3,{id:"margin",children:(0,i.jsx)(t.code,{children:"margin"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"number"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Sets the size of the white space outside of the component.",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<map margin="1.5"/> \x3c!-- Sets the margin on a map to be equal to 1.5em. This would be 22.5 pts high if the current font size is 15 --\x3e\n'})}),"\n",(0,i.jsx)(t.h3,{id:"padding",children:(0,i.jsx)(t.code,{children:"padding"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"number"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Sets the size of the white space between a component and its content.",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Applies to"}),": This attribute will only apply to components with children.",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<stack padding="0.5"/> \x3c!-- Sets the padding on a stack to be equal to 0.5em. This would be 7.5 pts high if the current font size is 15 --\x3e\n'})}),"\n",(0,i.jsx)(t.h3,{id:"width",children:(0,i.jsx)(t.code,{children:"width"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"number"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Default value"}),": If a width is not set, then the width shall be the natural width of the component or a dynamic size based on the ",(0,i.jsx)(t.code,{children:"grow"})," and alignment attributes.\n",(0,i.jsx)(t.strong,{children:"Description"}),": Sets the width of a component."]}),"\n",(0,i.jsx)(t.h3,{id:"height",children:(0,i.jsx)(t.code,{children:"height"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"number"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Sets the height of a component.",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'\x3c!-- Sets the width of a map to 30em, and the height to 20em. --\x3e\n<map width="30" height="20"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"grow",children:(0,i.jsx)(t.code,{children:"grow"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:"number"}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Sets whether or not a component's width or height will grow over its parent's primary axis. Components with a grow of 0 will fill to their natural or requested height. Components with a specified grow will fill up a percentage of the remaining space equal to their grow value divided by the total grow of all sibling components (including the component in question).",(0,i.jsx)(t.br,{}),"\n",'The default value for a component varies by component. For most components, if no grow value is specified, they will default to a grow value of "0". The following components however will have a default grow value of "1":']}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Map"}),"\n",(0,i.jsx)(t.li,{children:"Stack"}),"\n",(0,i.jsx)(t.li,{children:"Split"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Applies to"}),": All components may specify this value, but it will only take effect if the component is a child of a split or a stack. For stacks, grow indicates how the child grows along the vertical axis. For splits, grow indicates how the child grows along the horizontal axis.",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<stack>\n    \x3c!-- Heading will take up whatever vertical space it requires, and will occupy its natural width. --\x3e\n    <text content="Heading"/>\n    \x3c!-- The first map will occupy 1/3 of the remaining vertical space, and will occupy the full width available. --\x3e\n    <map grow="1"/>\n    \x3c!-- The first map will occupy 2/3 of the remaining vertical space, and will occupy the full width available. --\x3e\n    <map grow="2"/>\n</stack>\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"halign-horizontal-align",children:[(0,i.jsx)(t.code,{children:"halign"})," (Horizontal Align)"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:'"start" | "center" | "end"'}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Describes how the content of a component is aligned ",(0,i.jsx)(t.strong,{children:"horizontally"}),". For stacks and splits, the content is the child components. For a component like text, the content is the text itself."]}),"\n",(0,i.jsxs)(t.h3,{id:"valign-vertical-align",children:[(0,i.jsx)(t.code,{children:"valign"})," (Vertical Align)"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Type"}),": ",(0,i.jsx)(t.code,{children:'"start" | "center" | "end"'}),(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Description"}),": Describes how the content of a component is aligned ",(0,i.jsx)(t.strong,{children:"vertically"}),". For stacks and splits, the content is the child components. For a component like text, the content is the text itself."]}),"\n",(0,i.jsx)(t.h3,{id:"alignments-effect-on-cross-axis-stretching",children:"Alignments Effect on cross-axis stretching"}),"\n",(0,i.jsxs)(t.p,{children:["All components will stretch across the cross-axis if the corresponding alignment attribute (",(0,i.jsx)(t.code,{children:"halign"})," for stacks, ",(0,i.jsx)(t.code,{children:"valign"})," for splits) is not set on the parent of that component. But if a cross-axis alignment is set, then they will no longer stretch across the cross axis (otherwise the effect of alignment would not be observed).",(0,i.jsx)(t.br,{}),"\n","Some components will stretch across the cross-axis even if the cross-axis alignment is set on the parent: map, stack, split."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);